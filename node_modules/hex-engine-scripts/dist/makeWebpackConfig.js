"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _fs = _interopRequireDefault(require("fs"));

var _path = _interopRequireDefault(require("path"));

var _webpack = _interopRequireDefault(require("webpack"));

var _htmlWebpackPlugin = _interopRequireDefault(require("html-webpack-plugin"));

var _ForkTsCheckerWebpackPlugin = _interopRequireDefault(require("react-dev-utils/ForkTsCheckerWebpackPlugin"));

var _resolve = _interopRequireDefault(require("resolve"));

var _typescriptFormatter = _interopRequireDefault(require("react-dev-utils/typescriptFormatter"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

// @ts-ignore
// @ts-ignore
// @ts-ignore
var packageDir = function packageDir() {
  for (var _len = arguments.length, parts = new Array(_len), _key = 0; _key < _len; _key++) {
    parts[_key] = arguments[_key];
  }

  return _path["default"].resolve.apply(_path["default"], [__dirname, ".."].concat(parts));
};

var localDir = function localDir() {
  for (var _len2 = arguments.length, parts = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
    parts[_key2] = arguments[_key2];
  }

  return _path["default"].resolve.apply(_path["default"], [process.cwd()].concat(parts));
};

var findSrc = function findSrc(name) {
  var withExtension = function withExtension(ext) {
    return localDir("./src/".concat(name, ".").concat(ext));
  };

  if (_fs["default"].existsSync(withExtension("ts"))) {
    return withExtension("ts");
  } else if (_fs["default"].existsSync(withExtension("tsx"))) {
    return withExtension("tsx");
  } else if (_fs["default"].existsSync(withExtension("jsx"))) {
    return withExtension("jsx");
  } else if (_fs["default"].existsSync(withExtension("js"))) {
    return withExtension("js");
  } else {
    throw new Error("Could not find file named either '".concat(name, ".ts', '").concat(name, ".js', '").concat(name, ".tsx', or '").concat(name, ".jsx' in '").concat(localDir("src"), "'. Please create a file with one of those names."));
  }
};

var makeWebpackConfig = function makeWebpackConfig(_ref) {
  var mode = _ref.mode,
      srcFile = _ref.srcFile,
      outDir = _ref.outDir,
      library = _ref.library,
      title = _ref.title;
  var htmlWebpackPluginOptions = {
    title: title || "hex-engine game"
  };

  if (_fs["default"].existsSync(localDir("src/index.html"))) {
    htmlWebpackPluginOptions.template = localDir("src/index.html");
  }

  return {
    context: localDir(),
    devtool: mode === "development" ? "eval-source-map" : undefined,
    mode: mode === "test" ? "development" : mode,
    entry: [packageDir("./src/polyfills"), findSrc(srcFile)],
    output: {
      path: localDir(outDir),
      library: library,
      libraryTarget: library ? "umd" : "var"
    },
    resolve: {
      mainFields: ["browser", "main"],
      extensions: [".mjs", ".js", ".jsx", ".ts", ".tsx", ".json"],
      alias: mode === "production" ? {
        "@hex-engine/inspector$": "@hex-engine/inspector/dist/stub"
      } : {}
    },
    module: {
      rules: [{
        test: /\.[tj]sx?$/,
        loader: require.resolve("babel-loader"),
        exclude: /node_modules/,
        options: {
          babelrc: false,
          compact: true,
          presets: [require("@babel/preset-typescript")["default"], [require("@babel/preset-env")["default"], {
            modules: false
          }], require("@babel/preset-react")["default"]],
          plugins: [require("@babel/plugin-proposal-class-properties")["default"], require("@babel/plugin-proposal-nullish-coalescing-operator")["default"], require("@babel/plugin-proposal-optional-chaining")["default"]]
        }
      }, {
        test: /\.(png|jpe?g|gif|wav|mp3|ogg)$/i,
        use: require.resolve("file-loader")
      }, {
        test: /\.(ase|aseprite)$/i,
        use: require.resolve("aseprite-loader")
      }, {
        test: /\.(xml)$/i,
        use: require.resolve("xml-source-loader")
      }, {
        test: /\.(fnt)$/i,
        use: require.resolve("bmfont-loader")
      }, {
        test: /\.css$/i,
        use: [require.resolve("style-loader"), require.resolve("css-loader")]
      }, {
        test: /\.ogmo$/i,
        use: require.resolve("ogmo-project-loader")
      }, {
        test: /\.json$/i,
        use: require.resolve("ogmo-level-json-loader"),
        type: "javascript/auto"
      }]
    },
    plugins: [new _webpack["default"].DefinePlugin({
      "process.env.NODE_ENV": JSON.stringify(mode)
    }), mode === "test" || library && mode !== "development" ? null : new _htmlWebpackPlugin["default"](htmlWebpackPluginOptions), mode === "test" ? null : new _ForkTsCheckerWebpackPlugin["default"]({
      typescript: _resolve["default"].sync("typescript", {
        basedir: localDir()
      }),
      async: mode === "development",
      useTypescriptIncrementalApi: true,
      checkSyntacticErrors: true,
      tsconfig: _fs["default"].existsSync(localDir("tsconfig.json")) ? localDir("tsconfig.json") : packageDir("tsconfig.json"),
      reportFiles: ["**", "!**/__tests__/**", "!**/?(*.)(spec|test).*", "!**/src/setupTests.*"],
      silent: false,
      // The formatter is invoked directly in react-dev-utils/WebpackDevServerUtils during development
      formatter: mode === "production" ? _typescriptFormatter["default"] : undefined
    })].filter(Boolean),
    performance: {
      hints: false
    },
    optimization: {
      usedExports: true
    }
  };
};

var _default = makeWebpackConfig;
exports["default"] = _default;