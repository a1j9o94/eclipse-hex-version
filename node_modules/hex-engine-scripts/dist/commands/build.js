"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = build;

var _chalk = _interopRequireDefault(require("chalk"));

var _webpack = _interopRequireDefault(require("webpack"));

var _formatWebpackMessages = _interopRequireDefault(require("react-dev-utils/formatWebpackMessages"));

var _makeWebpackConfig = _interopRequireDefault(require("../makeWebpackConfig"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function build(_x) {
  return _build.apply(this, arguments);
}

function _build() {
  _build = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee(options) {
    var webpackConfig, compiler;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            process.env.BABEL_ENV = "production";
            process.env.NODE_ENV = "production";
            console.log("Creating an optimized production build...");
            webpackConfig = options.lib ? (0, _makeWebpackConfig["default"])({
              mode: "production",
              srcFile: "lib",
              outDir: "lib",
              library: options.lib,
              title: options.title
            }) : (0, _makeWebpackConfig["default"])({
              mode: "production",
              srcFile: "index",
              outDir: "dist",
              title: options.title
            }); // @ts-ignore

            compiler = (0, _webpack["default"])(webpackConfig);
            return _context.abrupt("return", new Promise(function (resolve, reject) {
              compiler.run(function (err, stats) {
                var messages;

                if (err) {
                  if (!err.message) {
                    return reject(err);
                  } // @ts-ignore


                  messages = (0, _formatWebpackMessages["default"])({
                    errors: [err.message],
                    warnings: []
                  });
                } else {
                  messages = (0, _formatWebpackMessages["default"])(stats.toJson({
                    all: false,
                    warnings: true,
                    errors: true
                  }));
                }

                if (messages.errors.length) {
                  // Only keep the first error. Others are often indicative
                  // of the same problem, but confuse the reader with noise.
                  if (messages.errors.length > 1) {
                    messages.errors.length = 1;
                  }

                  return reject(new Error(messages.errors.join("\n\n")));
                }

                if (process.env.CI && (typeof process.env.CI !== "string" || process.env.CI.toLowerCase() !== "false") && messages.warnings.length) {
                  console.log(_chalk["default"].yellow("\nTreating warnings as errors because process.env.CI = true.\n" + "Most CI servers set it automatically.\n"));
                  return reject(new Error(messages.warnings.join("\n\n")));
                }

                console.log(_chalk["default"].yellow(messages.warnings.join("\n\n")));

                if (options.lib) {
                  console.log("Build complete! The library bundle is in the 'lib' folder.");
                } else {
                  console.log("Build complete! To deploy your game, upload the contents of the 'dist' folder to a web server.");
                }

                resolve();
              });
            }));

          case 6:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _build.apply(this, arguments);
}