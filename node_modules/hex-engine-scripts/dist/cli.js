#!/usr/bin/env node
"use strict";

require("./polyfills");

var _chalk = _interopRequireDefault(require("chalk"));

var _yargsParser = _interopRequireDefault(require("yargs-parser"));

var _index = _interopRequireDefault(require("./index"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function main() {
  return _main.apply(this, arguments);
}

function _main() {
  _main = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee() {
    var usage, argv, command;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            usage = "Usage:\n\nhex-engine-scripts build\n\n  Compiles 'src/index.ts' (or 'src/index.js') into the 'dist' folder, creating\n  a production build suitable for uploading to static site hosting.\n\n  Options:\n    --lib: Compiles your code as a library instead of a standalone game.\n\n      Compiles your code as a library instead of a standalone game. This will\n      make the following changes:\n      - Compilation will start from 'src/lib.ts' (or 'src/lib.js') instead of\n        'src/index.ts' (or 'src/index.js').\n      - Build output will be written to the 'lib' folder instead of the 'dist'\n        folder.\n      - No 'index.html' file will be present in the build output.\n      - The output bundle will be wrapped in a UMD wrapper.\n\n      Provide a string that will be used as the library name in the UMD\n      wrapper; that library name will be used as a global variable if there's\n      no CommonJS or AMD module loader present when the code is run.\n\n      Example: hex-engine-scripts build --lib myGame\n      Example: hex-engine-scripts build --lib myVeryCoolGame\n\n    --title: The title to use in the generated index.html page.\n\n      Example: hex-engine-scripts build --title \"My Game\"\n\nhex-engine-scripts dev\n\n  Runs a local http dev server serving the compilation output 'src/index.ts'\n  (or 'src/index.js'). When files change, compilation will re-run\n  automatically.\n\n  Options:\n    --port: The port to run the http server on. If unspecified, defaults to 8080.\n\n      If the chosen port is unavailable, the program will ask to run on an\n      alternative port.\n\n      Example: hex-engine-scripts dev --port 1234\n\n    --lib: Serves 'src/lib.ts' (or .js) instead of 'src/index.ts' (or .js).\n\n      See the \"--lib\" option under 'hex-engine-scripts build' for more info.\n\n      Example: hex-engine-scripts dev --lib myGame\n      Example: hex-engine-scripts dev --lib myVeryCoolGame\n\n    --title: The title to use in the generated index.html page.\n\n      Example: hex-engine-scripts dev --title \"My Game\"\n\nhex-engine-scripts test\n\n  Runs tests using https://github.com/suchipi/test-it.\n\n  Options:\n    --watch: Runs interactively, watch files on disk, and re-run tests on when files change.\n    --update-snapshots, -u: Updates test snapshots.\n\n  Run 'hex-engine-scripts test --help' for more info.\n";
            argv = (0, _yargsParser["default"])(process.argv.slice(2), {
              "boolean": ["help", "watch", "u", "update-snapshots", "updateSnapshots"],
              string: ["lib", "title", "test-update-files", "testUpdateFiles"],
              number: ["port"]
            });
            command = argv._ && argv._[0];

            if (argv.lib === "") {
              argv.lib = "hexEngineGame";
            }

            if (!(!command || argv.help && command !== "test" || command !== "build" && command !== "dev" && command !== "test")) {
              _context.next = 8;
              break;
            }

            console.error(usage);
            process.exitCode = 1;
            return _context.abrupt("return");

          case 8:
            _context.next = 10;
            return (0, _index["default"])(command, argv);

          case 10:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _main.apply(this, arguments);
}

main()["catch"](function (err) {
  console.error(_chalk["default"].red(err && err.stack ? err.stack : err));
  process.exitCode = 1;
});