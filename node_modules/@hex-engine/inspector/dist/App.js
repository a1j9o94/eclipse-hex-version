function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React from "react";
import Tree from "./Tree";
import Controls from "./Controls";
import PausedOverlay from "./PausedOverlay";
export default function App(_ref) {
  var entity = _ref.entity,
      runLoop = _ref.runLoop,
      error = _ref.error,
      onExpand = _ref.onExpand,
      getExpanded = _ref.getExpanded,
      getSelectedEntity = _ref.getSelectedEntity,
      isHovered = _ref.isHovered,
      isOpen = _ref.isOpen,
      toggleOpen = _ref.toggleOpen,
      isSelectMode = _ref.isSelectMode,
      toggleSelectMode = _ref.toggleSelectMode,
      collapseTree = _ref.collapseTree;
  var ent = entity;
  return React.createElement("div", {
    style: {
      fontFamily: "Menlo, monospace",
      fontSize: 11
    }
  }, React.createElement("div", {
    style: _objectSpread({
      position: "fixed",
      top: 0,
      right: 0,
      borderBottomLeftRadius: "4px",
      overflow: "hidden",
      boxShadow: "0px 0px 10px rgba(0, 0, 0, 0.5)"
    }, isHovered ? {
      outlineStyle: "auto",
      outlineColor: "magenta"
    } : null)
  }, runLoop && !isOpen ? React.createElement(Controls, {
    isSelectMode: isSelectMode,
    toggleSelectMode: toggleSelectMode,
    isOpen: isOpen,
    toggleOpen: toggleOpen,
    runLoop: runLoop,
    error: error,
    collapseTree: collapseTree
  }) : null), runLoop && runLoop.isPaused() && runLoop.frameNumber === 0 ? React.createElement(PausedOverlay, {
    runLoop: runLoop
  }) : null, isOpen ? React.createElement("div", {
    style: _objectSpread({
      position: "fixed",
      top: 0,
      right: 0,
      bottom: 0,
      width: "33vw",
      backgroundColor: "rgba(255, 255, 255, 0.75)",
      boxShadow: "0px 0px 10px rgba(0, 0, 0, 0.5)",
      display: "flex",
      flexDirection: "column",
      height: "100%",
      boxSizing: "border-box"
    }, isHovered ? {
      outlineStyle: "auto",
      outlineColor: "magenta"
    } : null)
  }, runLoop ? React.createElement(Controls, {
    isSelectMode: isSelectMode,
    toggleSelectMode: toggleSelectMode,
    isOpen: isOpen,
    toggleOpen: toggleOpen,
    runLoop: runLoop,
    error: error,
    collapseTree: collapseTree
  }) : null, React.createElement("div", {
    style: {
      flexBasis: "100%",
      overflowY: "auto"
    }
  }, React.createElement(Tree, {
    name: "root",
    data: ent,
    parent: null,
    path: ["root"],
    onExpand: onExpand,
    getExpanded: getExpanded,
    getSelectedEntity: getSelectedEntity
  }))) : null);
}