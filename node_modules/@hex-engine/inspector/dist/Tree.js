function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

import React from "react";
import Expandable from "./Expandable";
import Button from "./Button";
import EditableString from "./EditableString";
import EditableBoolean from "./EditableBoolean";
import { StorageForInspectorHover } from "./useInspectorHover";

function gatherPropertyNames(obj) {
  var soFar = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Set();
  var proto = Object.getPrototypeOf(obj);

  if (proto && proto !== Object.prototype) {
    gatherPropertyNames(proto, soFar);
  }

  Object.getOwnPropertyNames(obj).forEach(function (name) {
    return soFar.add(name);
  });

  var results = _toConsumableArray(soFar).filter(function (prop) {
    return prop !== "constructor" && !(typeof prop === "string" && prop.match(/^_/));
  });

  return results;
}

var globalVariableId = 0;
export default function Tree(_ref) {
  var name = _ref.name,
      data = _ref.data,
      parent = _ref.parent,
      path = _ref.path,
      onExpand = _ref.onExpand,
      getExpanded = _ref.getExpanded,
      getSelectedEntity = _ref.getSelectedEntity;
  var className = "";
  var hasContent = false;
  var preview = "";
  var content = "";
  var onMouseEnter;
  var onMouseLeave;

  var setValue = function setValue(newValue) {
    parent[name] = newValue;
  };

  var color = function color(clr, str) {
    return React.createElement("span", {
      style: {
        color: clr
      }
    }, str);
  };

  function entriesForArray(array) {
    return array.map(function (val, index) {
      return React.createElement(Tree, {
        key: index,
        data: val,
        name: String(index),
        parent: array,
        path: [].concat(_toConsumableArray(path), [index]),
        onExpand: onExpand,
        getExpanded: getExpanded,
        getSelectedEntity: getSelectedEntity
      });
    });
  }

  function entriesForProperties(properties) {
    hasContent = properties.length > 0;

    var sortedProperties = _toConsumableArray(properties).sort(function (a, b) {
      var propA = a.toString();
      var propB = b.toString();
      var valA = data[propA];
      var valB = data[propB];

      if (typeof valA === "function" && typeof valB !== "function") {
        return 1;
      }

      if (typeof valA !== "function" && typeof valB === "function") {
        return -1;
      }

      if (propA[0] === "_" && propB[0] !== "_") {
        return 1;
      }

      if (propA[0] !== "_" && propB[0] === "_") {
        return -1;
      }

      if (propA.toUpperCase() < propB.toUpperCase()) {
        return -1;
      }

      if (propA.toUpperCase() > propB.toUpperCase()) {
        return 1;
      }

      return 0;
    });

    var propsToRender = sortedProperties;

    if (sortedProperties.length > 50) {
      propsToRender = sortedProperties.slice(0, 50);
    }

    return React.createElement(React.Fragment, null, propsToRender.map(function (prop, index) {
      var val = data[prop];
      return React.createElement(Tree, {
        key: index,
        name: prop.toString(),
        data: val,
        parent: data,
        path: [].concat(_toConsumableArray(path), [prop.toString()]),
        onExpand: onExpand,
        getExpanded: getExpanded,
        getSelectedEntity: getSelectedEntity
      });
    }), propsToRender !== sortedProperties ? React.createElement("div", {
      style: {
        paddingLeft: 8,
        paddingTop: 2
      }
    }, "...and ", sortedProperties.length - propsToRender.length, " more properties not shown.") : null);
  }

  if (typeof data === "boolean") {
    preview = React.createElement(EditableBoolean, {
      color: "rgb(28, 0, 207)",
      value: data,
      onChange: function onChange(newValue) {
        setValue(newValue);
      }
    });
  } else if (typeof data === "bigint") {
    preview = color("rgb(28, 0, 207)", String(data) + "n");
  } else if (typeof data === "number") {
    preview = React.createElement(EditableString, {
      expanded: false,
      color: "rgb(28, 0, 207)",
      value: String(data),
      onChange: function onChange(newValue) {
        setValue(Number(newValue) || 0);
      }
    });
    hasContent = true;
    content = React.createElement(EditableString, {
      expanded: true,
      color: "rgb(28, 0, 207)",
      value: String(data),
      onChange: function onChange(newValue) {
        setValue(Number(newValue) || 0);
      }
    });
  } else if (typeof data === "string") {
    preview = React.createElement("span", null, "\"", React.createElement(EditableString, {
      expanded: false,
      color: "rgb(196, 26, 22)",
      value: data,
      onChange: function onChange(newValue) {
        setValue(newValue);
      }
    }), "\"");
    hasContent = true;
    content = React.createElement(EditableString, {
      expanded: true,
      color: "rgb(196, 26, 22)",
      value: data,
      onChange: function onChange(newValue) {
        setValue(newValue);
      }
    });
  } else if (_typeof(data) === "symbol") {
    preview = React.createElement("span", null, "\"", color("rgb(196, 26, 22)", data.toString()), "\"");
  } else if (_typeof(data) === "object" && data != null && data.constructor === RegExp) {
    preview = color("rgb(196, 26, 22)", data.toString());
  } else if (typeof data === "undefined") {
    preview = color("rgb(128, 128, 128)", "undefined");
  } else if (data === null) {
    preview = color("rgb(128, 128, 128)", "null");
  } else if (typeof data === "function") {
    preview = React.createElement("span", null, color("rgb(13, 34, 170)", "ƒ "), data.name || "<anonymous function>", React.createElement(Button, {
      onClick: function onClick() {
        data.call(parent);
      },
      title: "Run function",
      style: {
        fontFamily: "initial",
        cursor: "pointer",
        paddingLeft: 4,
        filter: "hue-rotate(-75deg)"
      }
    }, "▶️"));
    hasContent = true;
    content = data.toString();
  } else if (Array.isArray(data)) {
    className = "Array(".concat(data.length, ")");
    hasContent = data.length > 0;
    content = entriesForArray(data);
    preview = hasContent ? "[...]" : "[]";
  } else if (data instanceof Set) {
    className = "Set(".concat(data.size, ")");
    hasContent = data.size > 0;
    preview = hasContent ? "[...]" : "[]";
    content = entriesForArray(_toConsumableArray(data.values()));
  } else if (data instanceof Map) {
    className = "Map(".concat(data.size, ")");
    hasContent = data.size > 0;
    preview = hasContent ? "{...}" : "{}";
    content = entriesForArray(_toConsumableArray(data.entries()));
  } else if (data instanceof HTMLImageElement) {
    className = "HTMLImageElement";
    hasContent = true;
    content = React.createElement("div", null, React.createElement("img", {
      style: {
        maxWidth: "100%"
      },
      src: data.src
    }), entriesForProperties(gatherPropertyNames(data)));
  } else if (_typeof(data) === "object" && data != null) {
    if (data._kind === "entity") {
      className = data.name ? "Entity (".concat(data.name, ")") : "Entity";
      content = entriesForProperties(["children", "components", "name", "enable", "disable", "id", "destroy"]);
      var hoverables = [];
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = data.components[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var component = _step.value;
          hoverables.push(component);
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator["return"] != null) {
            _iterator["return"]();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = data.descendants()[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var descendant = _step2.value;
          var _iteratorNormalCompletion3 = true;
          var _didIteratorError3 = false;
          var _iteratorError3 = undefined;

          try {
            for (var _iterator3 = descendant.components[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
              var _component = _step3.value;
              hoverables.push(_component);
            }
          } catch (err) {
            _didIteratorError3 = true;
            _iteratorError3 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion3 && _iterator3["return"] != null) {
                _iterator3["return"]();
              }
            } finally {
              if (_didIteratorError3) {
                throw _iteratorError3;
              }
            }
          }
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
            _iterator2["return"]();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }

      onMouseEnter = function onMouseEnter() {
        hoverables.forEach(function (component) {
          var storageForEntity = component.entity.getComponent(StorageForInspectorHover);
          if (!storageForEntity) return;
          var storageForComponent = storageForEntity.beginCallbacks.get(component);
          if (!storageForComponent) return;
          storageForComponent.forEach(function (callback) {
            return callback();
          });
        });
      };

      onMouseLeave = function onMouseLeave() {
        hoverables.forEach(function (component) {
          var storageForEntity = component.entity.getComponent(StorageForInspectorHover);
          if (!storageForEntity) return;
          var storageForComponent = storageForEntity.endCallbacks.get(component);
          if (!storageForComponent) return;
          storageForComponent.forEach(function (callback) {
            return callback();
          });
        });
      };
    } else if (data._kind === "component") {
      var _data$type, _data$type2;

      className = ((_data$type = data.type) === null || _data$type === void 0 ? void 0 : _data$type.name) ? "Component (".concat((_data$type2 = data.type) === null || _data$type2 === void 0 ? void 0 : _data$type2.name, ")") : "Component";

      if (!data.isEnabled) {
        className += " - disabled";
      }

      content = entriesForProperties(gatherPropertyNames(data));

      onMouseEnter = function onMouseEnter() {
        var storageForEntity = data.entity.getComponent(StorageForInspectorHover);
        if (!storageForEntity) return;
        var storageForComponent = storageForEntity.beginCallbacks.get(data);
        if (!storageForComponent) return;
        storageForComponent.forEach(function (callback) {
          return callback();
        });
      };

      onMouseLeave = function onMouseLeave() {
        var storageForEntity = data.entity.getComponent(StorageForInspectorHover);
        if (!storageForEntity) return;
        var storageForComponent = storageForEntity.endCallbacks.get(data);
        if (!storageForComponent) return;
        storageForComponent.forEach(function (callback) {
          return callback();
        });
      };
    } else if (data._kind === "grid" && typeof data.defaultValue === "number") {
      className = "Grid (".concat(data.size.x, ", ").concat(data.size.y, ")");
      content = React.createElement(React.Fragment, null, data.data.map(function (row, xIndex) {
        return React.createElement("div", {
          key: xIndex
        }, row.map(function (gridValue, yIndex) {
          return React.createElement(EditableString, {
            key: yIndex,
            expanded: false,
            color: "rgb(28, 0, 207)",
            value: String(gridValue),
            onChange: function onChange(newValue) {
              data.data[xIndex][yIndex] = Number(newValue) || data.defaultValue;
            }
          });
        }));
      }), entriesForProperties(gatherPropertyNames(data)));
    } else if (data._kind === "grid" && typeof data.defaultValue === "string") {
      className = "Grid (".concat(data.size.x, ", ").concat(data.size.y, ")");
      content = React.createElement(React.Fragment, null, data.data.map(function (row, xIndex) {
        return React.createElement("div", {
          key: xIndex
        }, row.map(function (gridValue, yIndex) {
          return React.createElement(EditableString, {
            expanded: false,
            color: "rgb(196, 26, 22)",
            value: gridValue,
            onChange: function onChange(newValue) {
              data.data[xIndex][yIndex] = newValue;
            }
          });
        }));
      }), entriesForProperties(gatherPropertyNames(data)));
    } else if (data._kind === "grid") {
      className = "Grid (".concat(data.size.x, ", ").concat(data.size.y, ")");
      content = entriesForProperties(gatherPropertyNames(data));
    } else {
      var _data$constructor;

      var formatNumber = function formatNumber(val) {
        var num = Number(val);
        var isInteger = num % 1 === 0;
        if (isInteger) return String(num);
        return num.toFixed(2);
      };

      className = (((_data$constructor = data.constructor) === null || _data$constructor === void 0 ? void 0 : _data$constructor.name) || "") + ( // Vector
      data.x != null && data.y != null ? " (".concat(formatNumber(data.x), ", ").concat(formatNumber(data.y), ")") : "") + ( // LineSegment
      _typeof(data.start) === "object" && data.start != null && _typeof(data.end) === "object" && data.end != null && data.start.x != null && data.start.y != null && data.end.x != null && data.end.y != null ? " (".concat(formatNumber(data.start.x), ", ").concat(formatNumber(data.start.y), "), (").concat(formatNumber(data.end.x), ", ").concat(formatNumber(data.end.y), ")") : "") + ( // Polygon
      Array.isArray(data.points) && data.points.every(function (point) {
        return _typeof(point) === "object" && point != null && point.x != null && point.x != null;
      }) ? " [".concat(data.points.map(function (point) {
        return "(".concat(formatNumber(point.x), ", ").concat(formatNumber(point.y), ")");
      }), "]") : "");
      content = entriesForProperties(gatherPropertyNames(data));
    }
  }

  var expanded = getExpanded(path);

  var handleExpand = function handleExpand() {
    onExpand(path, !expanded);
  };

  var selectedEntity = getSelectedEntity();
  return React.createElement(Expandable, {
    className: className,
    label: name,
    hasContent: hasContent,
    preview: preview,
    expanded: expanded,
    isSelected: selectedEntity !== null && data.id === selectedEntity.id,
    onExpand: handleExpand,
    onMouseEnter: onMouseEnter,
    onMouseLeave: onMouseLeave,
    onContextMenu: function onContextMenu(event) {
      event.preventDefault();
      var variableName = "temp" + globalVariableId++; // @ts-ignore

      window[variableName] = data;
      console.log(variableName, data);
      alert("Target stored as ".concat(variableName));
    }
  }, content);
}