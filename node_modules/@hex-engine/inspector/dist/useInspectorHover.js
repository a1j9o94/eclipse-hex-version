import { useCallbackAsCurrent, useType, useNewComponent, useEntity, useCurrentComponent } from "@hex-engine/core";
export function StorageForInspectorHover() {
  useType(StorageForInspectorHover);
  return {
    beginCallbacks: new WeakMap(),
    endCallbacks: new WeakMap()
  };
}
/**
 * Returns an object with three properties:
 *
 * - `isHovered`: Whether the current Component, Entity, or one of its parents is
 * currently being hovered over in the Inspector.
 * - `onHoverStart`: Register a function to be run when the user starts hovering over
 * the current Component, Entity, or one of its parents in the Inspector.
 * - `onHoverEnd`: Register a function to be run when the user stops hovering over
 * the current Component, Entity, or one of its parents in the Inspector.
 *
 * The idea here is that when someone hovers over the Component or Entity in the
 * Inspector, you visually highlight the corresponding rendered objects, if any.
 */

export default function useInspectorHover() {
  var storage = useEntity().getComponent(StorageForInspectorHover) || useNewComponent(StorageForInspectorHover);
  var component = useCurrentComponent();
  var api = {
    isHovered: false,
    onHoverStart: function onHoverStart(callback) {
      var storageForComponent = storage.beginCallbacks.get(component);

      if (!storageForComponent) {
        storageForComponent = new Set();
        storage.beginCallbacks.set(component, storageForComponent);
      }

      storageForComponent.add(useCallbackAsCurrent(callback));
    },
    onHoverEnd: function onHoverEnd(callback) {
      var storageForComponent = storage.endCallbacks.get(component);

      if (!storageForComponent) {
        storageForComponent = new Set();
        storage.endCallbacks.set(component, storageForComponent);
      }

      storageForComponent.add(useCallbackAsCurrent(callback));
    }
  };
  api.onHoverStart(function () {
    return api.isHovered = true;
  });
  api.onHoverEnd(function () {
    return api.isHovered = false;
  });
  return api;
}