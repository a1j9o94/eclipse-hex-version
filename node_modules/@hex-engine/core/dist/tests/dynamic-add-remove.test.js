import { createRoot, useType, useEnableDisable, useNewComponent } from "..";
var messages = [];

var log = function log(msg) {
  return messages.push(msg);
};

beforeEach(function () {
  messages = [];
});
test("dynamic add", function () {
  function Root() {
    useType(Root);
  }

  function DynamicallyAdded() {
    useType(DynamicallyAdded);
  }

  var ent = createRoot(Root);
  expect(ent.getComponent(DynamicallyAdded)).toBe(null);
  var added = ent.addComponent(DynamicallyAdded);
  expect(ent.getComponent(DynamicallyAdded)).toBe(added);
});
test("dynamic add with enable disable", function () {
  function Root() {
    useType(Root);
  }

  function DynamicallyAdded() {
    useType(DynamicallyAdded);

    var _useEnableDisable = useEnableDisable(),
        onEnabled = _useEnableDisable.onEnabled,
        onDisabled = _useEnableDisable.onDisabled;

    onEnabled(function () {
      return log("enabled");
    });
    onDisabled(function () {
      return log("disabled");
    });
  }

  var ent = createRoot(Root);
  ent.addComponent(DynamicallyAdded);
  expect(messages).toEqual(["enabled"]);
});
test("dynamic remove", function () {
  function Root() {
    useType(Root);
    useNewComponent(DynamicallyRemoved);
  }

  function DynamicallyRemoved() {
    useType(DynamicallyRemoved);
  }

  var ent = createRoot(Root);
  var toRemove = ent.getComponent(DynamicallyRemoved);
  expect(toRemove).not.toBe(null);
  ent.removeComponent(toRemove);
  expect(ent.getComponent(DynamicallyRemoved)).toBe(null);
});
test("dynamic add with enable disable", function () {
  function Root() {
    useType(Root);
    useNewComponent(DynamicallyRemoved);
  }

  function DynamicallyRemoved() {
    useType(DynamicallyRemoved);

    var _useEnableDisable2 = useEnableDisable(),
        onEnabled = _useEnableDisable2.onEnabled,
        onDisabled = _useEnableDisable2.onDisabled;

    onEnabled(function () {
      return log("enabled");
    });
    onDisabled(function () {
      return log("disabled");
    });
  }

  var ent = createRoot(Root);
  var toRemove = ent.getComponent(DynamicallyRemoved);
  ent.removeComponent(toRemove);
  expect(messages).toEqual(["enabled", "disabled"]);
});