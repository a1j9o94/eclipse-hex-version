import { createRoot, useChild, useNewComponent, useDestroy, useEnableDisable, useCallbackAsCurrent } from "..";
var messages = [];

var log = function log(msg) {
  return messages.push(msg);
};

beforeEach(function () {
  messages = [];
});
test("onDestroy in component, destroy from entity", function () {
  var ent;
  createRoot(function () {
    ent = useChild(function () {
      var _useDestroy = useDestroy(),
          onDestroy = _useDestroy.onDestroy;

      onDestroy(function () {
        return log("onDestroy in component");
      });
    });
  });
  ent.destroy();
  expect(messages).toEqual(["onDestroy in component"]);
});
test("onDestroy in component, destroy from component", function () {
  createRoot(function () {
    useChild(function () {
      var _useDestroy2 = useDestroy(),
          onDestroy = _useDestroy2.onDestroy,
          destroy = _useDestroy2.destroy;

      onDestroy(function () {
        return log("onDestroy in component");
      });
      destroy();
    });
  });
  expect(messages).toEqual(["onDestroy in component"]);
});
test("children are destroyed depth-first", function () {
  var ent;
  createRoot(function () {
    ent = useChild(function () {
      var _useDestroy3 = useDestroy(),
          onDestroy = _useDestroy3.onDestroy;

      onDestroy(function () {
        return log("onDestroy in component");
      });
      useChild(function () {
        var _useDestroy4 = useDestroy(),
            onDestroy = _useDestroy4.onDestroy;

        onDestroy(function () {
          return log("onDestroy in child");
        });
        useChild(function () {
          var _useDestroy5 = useDestroy(),
              onDestroy = _useDestroy5.onDestroy;

          onDestroy(function () {
            return log("onDestroy in grandchild");
          });
        });
      });
    });
  });
  ent.destroy();
  expect(messages).toEqual(["onDestroy in grandchild", "onDestroy in child", "onDestroy in component"]);
});
test("child destroy doesn't destroy parent", function () {
  var ent;
  createRoot(function () {
    useChild(function () {
      var _useDestroy6 = useDestroy(),
          onDestroy = _useDestroy6.onDestroy;

      onDestroy(function () {
        return log("onDestroy in component");
      });
      ent = useChild(function () {
        var _useDestroy7 = useDestroy(),
            onDestroy = _useDestroy7.onDestroy;

        onDestroy(function () {
          return log("onDestroy in child");
        });
        useChild(function () {
          var _useDestroy8 = useDestroy(),
              onDestroy = _useDestroy8.onDestroy;

          onDestroy(function () {
            return log("onDestroy in grandchild");
          });
        });
      });
    });
  });
  ent.destroy();
  expect(messages).toEqual(["onDestroy in grandchild", "onDestroy in child"]);
});
test("destroy disables", function () {
  var ent;
  createRoot(function () {
    ent = useChild(function () {
      var _useDestroy9 = useDestroy(),
          onDestroy = _useDestroy9.onDestroy;

      onDestroy(function () {
        return log("onDestroy in component");
      });

      var _useEnableDisable = useEnableDisable(),
          onDisabled = _useEnableDisable.onDisabled;

      onDisabled(function () {
        return log("component disabled");
      });
      useChild(function () {
        var _useDestroy10 = useDestroy(),
            onDestroy = _useDestroy10.onDestroy;

        onDestroy(function () {
          return log("onDestroy in child");
        });

        var _useEnableDisable2 = useEnableDisable(),
            onDisabled = _useEnableDisable2.onDisabled;

        onDisabled(function () {
          return log("child disabled");
        });
        useChild(function () {
          var _useDestroy11 = useDestroy(),
              onDestroy = _useDestroy11.onDestroy;

          onDestroy(function () {
            return log("onDestroy in grandchild");
          });

          var _useEnableDisable3 = useEnableDisable(),
              onDisabled = _useEnableDisable3.onDisabled;

          onDisabled(function () {
            return log("grandchild disabled");
          });
        });
      });
    });
  });
  ent.destroy();
  expect(messages).toEqual(["grandchild disabled", "onDestroy in grandchild", "child disabled", "onDestroy in child", "component disabled", "onDestroy in component"]);
});
test("destroy from component A runs onDestroy in sibling component", function () {
  var ent;
  createRoot(function () {
    ent = useChild(function () {
      var _useDestroy12 = useDestroy(),
          onDestroy = _useDestroy12.onDestroy,
          destroy = _useDestroy12.destroy;

      onDestroy(function () {
        return log("onDestroy in component");
      });
      useNewComponent(function () {
        var _useDestroy13 = useDestroy(),
            onDestroy = _useDestroy13.onDestroy;

        onDestroy(function () {
          return log("onDestroy in other component");
        });
      });
      return {
        boom: useCallbackAsCurrent(destroy)
      };
    });
  }); // @ts-ignore

  ent.rootComponent.boom();
  expect(messages).toEqual(["onDestroy in component", "onDestroy in other component"]);
});