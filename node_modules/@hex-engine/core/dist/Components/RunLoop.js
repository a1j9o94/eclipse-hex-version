import HooksSystem from "../HooksSystem";
import useEnableDisable from "../Hooks/useEnableDisable";
import ErrorBoundary from "./ErrorBoundary";
var _HooksSystem$hooks = HooksSystem.hooks,
    useType = _HooksSystem$hooks.useType,
    useEntity = _HooksSystem$hooks.useEntity;
/**
 * An internal requestAnimationFrame-based RunLoop to be placed on
 * the root Entity.
 *
 * It lets you register callbacks that should be run every frame,
 * and also has controls to pause, step, and resume frames.
 *
 * In `@hex-engine/2d`, this Component is included as part of the
 * root `Canvas` component.
 *
 * The `pause`, `step`, `resume`, `isPaused`, and `frameNumber` functions
 * on the API object for this Component are used by `@hex-engine/inspector`.
 *
 * If you are using `@hex-engine/2d`, you do not need to use this Component
 * directly; use `Canvas` instead.
 */

export default function RunLoop() {
  useType(RunLoop);
  var ent = useEntity();
  var frameNumber = 0;
  var frameRequest = null;
  var lastTimestamp = null;
  var onFrameCallbacks = new Set();
  var _isPaused = false;

  var _useEnableDisable = useEnableDisable(),
      onEnabled = _useEnableDisable.onEnabled,
      onDisabled = _useEnableDisable.onDisabled;

  function runFrameCallbacks(delta) {
    frameNumber++;
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = onFrameCallbacks[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var onFrameCallback = _step.value;

        try {
          onFrameCallback(delta);
        } catch (_err) {
          var err = _err;
          ErrorBoundary.runHandlers(ent, err);
        }
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator["return"] != null) {
          _iterator["return"]();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }
  }

  function tick(timestamp) {
    if (lastTimestamp) {
      var _delta = timestamp - lastTimestamp;

      lastTimestamp = timestamp;
      runFrameCallbacks(_delta);
    } else {
      lastTimestamp = timestamp;
    }

    if (!_isPaused) {
      frameRequest = requestAnimationFrame(tick);
    }
  }

  function pause() {
    if (frameRequest != null) {
      cancelAnimationFrame(frameRequest);
    }

    _isPaused = true;
  }

  function step() {
    runFrameCallbacks(16.667);
  }

  function resume() {
    if (frameRequest != null) {
      cancelAnimationFrame(frameRequest);
    }

    frameRequest = requestAnimationFrame(function (timestamp) {
      lastTimestamp = timestamp;
      frameRequest = requestAnimationFrame(tick);
    });
    _isPaused = false;
  }

  onEnabled(function RunLoopEnabled() {
    if (frameRequest != null) {
      cancelAnimationFrame(frameRequest);
    }

    frameRequest = requestAnimationFrame(tick);
  });
  onDisabled(function RunLoopDisabled() {
    if (frameRequest != null) {
      cancelAnimationFrame(frameRequest);
    }
  });
  return {
    /**
     * Adds a function that should be called every frame.
     * @param callback The function to call every frame.
     */
    addFrameCallback: function addFrameCallback(callback) {
      onFrameCallbacks.add(callback);
    },

    /**
     * Removes a previously-added function, so that it is no longer
     * called every frame.
     * @param callback The function to no longer call every frame.
     */
    removeFrameCallback: function removeFrameCallback(callback) {
      onFrameCallbacks["delete"](callback);
    },

    /**
     * Stop running frame callbacks every animation frame.
     *
     * This is for debugging purposes.
     */
    pause: pause,

    /**
     * Call all registered frame callbacks *once*, as if
     * one animation frame had passed.
     *
     * This is debugging purposes.
     */
    step: step,

    /**
     * Resume normal execution where frame callbacks are
     * called once per animation frame.
     *
     * This should be called after calling `pause`.
     */
    resume: resume,

    /**
     * Whether frame callbacks are currently being called once
     * per animation frame or not.
     */
    isPaused: function isPaused() {
      return _isPaused;
    },

    /**
     * The current frame number. This number starts at zero
     * and increments by one every time the frame callbacks are called.
     *
     * This is for debugging purposes only.
     */
    get frameNumber() {
      return frameNumber;
    }

  };
}