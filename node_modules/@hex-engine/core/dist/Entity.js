function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import instantiate from "./instantiate";
import { StorageForUseDestroy } from "./Hooks/useDestroy";

function _destroy(entity) {
  if (entity._isDestroying) return;
  entity._isDestroying = true;
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = entity.children[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var child = _step.value;

      _destroy(child);
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator["return"] != null) {
        _iterator["return"]();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  entity.disable();
  var storageForUseDestroy = entity.getComponent(StorageForUseDestroy);

  if (storageForUseDestroy) {
    storageForUseDestroy.callbacks.forEach(function (callback) {
      return callback();
    });
  }

  if (entity.parent) {
    entity.parent.removeChild(entity);
  }

  entity._isDestroying = false;
  entity._isDestroyed = true;
}

function _enable(entity) {
  var _iteratorNormalCompletion2 = true;
  var _didIteratorError2 = false;
  var _iteratorError2 = undefined;

  try {
    for (var _iterator2 = entity.components[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
      var component = _step2.value;

      if (!component.isEnabled) {
        component.enable();
      }
    }
  } catch (err) {
    _didIteratorError2 = true;
    _iteratorError2 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
        _iterator2["return"]();
      }
    } finally {
      if (_didIteratorError2) {
        throw _iteratorError2;
      }
    }
  }

  var _iteratorNormalCompletion3 = true;
  var _didIteratorError3 = false;
  var _iteratorError3 = undefined;

  try {
    for (var _iterator3 = entity.children[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
      var child = _step3.value;

      _enable(child);
    }
  } catch (err) {
    _didIteratorError3 = true;
    _iteratorError3 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion3 && _iterator3["return"] != null) {
        _iterator3["return"]();
      }
    } finally {
      if (_didIteratorError3) {
        throw _iteratorError3;
      }
    }
  }
}

function _disable(entity) {
  var _iteratorNormalCompletion4 = true;
  var _didIteratorError4 = false;
  var _iteratorError4 = undefined;

  try {
    for (var _iterator4 = entity.components[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
      var component = _step4.value;

      if (component.isEnabled) {
        component.disable();
      }
    }
  } catch (err) {
    _didIteratorError4 = true;
    _iteratorError4 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion4 && _iterator4["return"] != null) {
        _iterator4["return"]();
      }
    } finally {
      if (_didIteratorError4) {
        throw _iteratorError4;
      }
    }
  }

  var _iteratorNormalCompletion5 = true;
  var _didIteratorError5 = false;
  var _iteratorError5 = undefined;

  try {
    for (var _iterator5 = entity.children[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
      var child = _step5.value;

      _disable(child);
    }
  } catch (err) {
    _didIteratorError5 = true;
    _iteratorError5 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion5 && _iterator5["return"] != null) {
        _iterator5["return"]();
      }
    } finally {
      if (_didIteratorError5) {
        throw _iteratorError5;
      }
    }
  }
}

function gatherDescendants(ent) {
  var descendants = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  var _iteratorNormalCompletion6 = true;
  var _didIteratorError6 = false;
  var _iteratorError6 = undefined;

  try {
    for (var _iterator6 = ent.children[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
      var child = _step6.value;
      descendants.push(child);
    }
  } catch (err) {
    _didIteratorError6 = true;
    _iteratorError6 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion6 && _iterator6["return"] != null) {
        _iterator6["return"]();
      }
    } finally {
      if (_didIteratorError6) {
        throw _iteratorError6;
      }
    }
  }

  var _iteratorNormalCompletion7 = true;
  var _didIteratorError7 = false;
  var _iteratorError7 = undefined;

  try {
    for (var _iterator7 = ent.children[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
      var _child = _step7.value;
      gatherDescendants(_child, descendants);
    }
  } catch (err) {
    _didIteratorError7 = true;
    _iteratorError7 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion7 && _iterator7["return"] != null) {
        _iterator7["return"]();
      }
    } finally {
      if (_didIteratorError7) {
        throw _iteratorError7;
      }
    }
  }

  return descendants;
}

var id = 0;

var Entity =
/*#__PURE__*/
function () {
  function Entity() {
    _classCallCheck(this, Entity);

    _defineProperty(this, "_kind", "entity");

    _defineProperty(this, "components", new Set());

    _defineProperty(this, "children", new Set());

    _defineProperty(this, "parent", null);

    _defineProperty(this, "name", null);

    _defineProperty(this, "id", -1);

    _defineProperty(this, "rootComponent", void 0);

    _defineProperty(this, "_isDestroying", false);

    _defineProperty(this, "_isDestroyed", false);
  }

  _createClass(Entity, [{
    key: "_componentsByType",
    value: function _componentsByType() {
      return new Map(_toConsumableArray(this.components).map(function (component) {
        return [component.type, component];
      }));
    }
  }, {
    key: "getComponent",
    value: function getComponent(componentType) {
      var maybeComponent = this._componentsByType().get(componentType); // @ts-ignore


      return maybeComponent !== null && maybeComponent !== void 0 ? maybeComponent : null;
    }
  }, {
    key: "hasComponent",
    value: function hasComponent(componentType) {
      var maybeComponent = this._componentsByType().get(componentType);

      return Boolean(maybeComponent);
    }
  }, {
    key: "addComponent",
    value: function addComponent(componentFactory) {
      var component = instantiate(componentFactory, this);
      this.components.add(component);
      return component;
    }
  }, {
    key: "removeComponent",
    value: function removeComponent(componentInstance) {
      if (!this.components.has(componentInstance)) return;
      componentInstance.disable();
      this.components["delete"](componentInstance);
    }
  }, {
    key: "enable",
    value: function enable() {
      _enable(this);
    }
  }, {
    key: "disable",
    value: function disable() {
      _disable(this);
    }
  }, {
    key: "destroy",
    value: function destroy() {
      _destroy(this);
    }
  }, {
    key: "descendants",
    value: function descendants() {
      return gatherDescendants(this);
    }
  }, {
    key: "ancestors",
    value: function ancestors() {
      var ancestors = [];
      var currentEnt = this.parent;

      while (currentEnt) {
        ancestors.unshift(currentEnt);
        currentEnt = currentEnt.parent;
      }

      return ancestors;
    }
  }, {
    key: "createChild",
    value: function createChild(componentFactory) {
      var child = Entity._create(componentFactory, this);

      return child;
    }
  }, {
    key: "addChild",
    value: function addChild(child) {
      if (child.parent !== null) {
        throw new Error("The child passed into addChild already had a parent. Either remove it from its parent before calling addChild, or call takeChild instead.");
      }

      this.children.add(child);
      child.parent = this;
    }
  }, {
    key: "removeChild",
    value: function removeChild(child) {
      if (child.parent !== this) {
        throw new Error("Attempted to remove a child from this Entity, but this Entity wasn't the child's parent.");
      }

      this.children["delete"](child);
      child.parent = null;

      if (process.env.NODE_ENV !== "production") {
        setTimeout(function () {
          if (!child._isDestroyed) {
            console.warn("A child was removed from its parent, but wasn't destroyed within 1 second. This can cause memory leaks.\nWhen removing a child entity, either destroy it or give it a new parent.\nThis message will not be logged in production.\n", child);
          }
        }, 1000);
      }
    }
  }, {
    key: "takeChild",
    value: function takeChild(entity) {
      var _entity$parent;

      (_entity$parent = entity.parent) === null || _entity$parent === void 0 ? void 0 : _entity$parent.removeChild(entity);
      this.addChild(entity);
    }
  }], [{
    key: "_create",
    value: function _create(componentFactory, parent) {
      var ent = new Entity();
      ent.id = id;
      id++;

      if (parent) {
        parent.addChild(ent);
      }

      var component = instantiate(componentFactory, ent);
      ent.rootComponent = component;
      ent.components.add(component);
      return ent;
    }
  }]);

  return Entity;
}();

export { Entity as default };