/**
 * Gathers all the property names on `obj` and its prototypical parents,
 * by looking up the tree.
 * @param obj The object you want the property names of
 */
function gatherPropertyNames(obj) {
  var soFar = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Set();
  var proto = Object.getPrototypeOf(obj);

  if (proto && proto !== Object.prototype) {
    gatherPropertyNames(proto, soFar);
  }

  Object.getOwnPropertyNames(obj).forEach(function (name) {
    return soFar.add(name);
  });
  return soFar;
}
/**
 * Creates getters and setters on `proxy` for every property on `original`,
 * that forward to the cooresponding properties on `original`.
 * @param original The object you want to forward to
 * @param proxy The object where you want to create the getters/setters.
 */


export default function proxyProperties(original, proxy) {
  var names = gatherPropertyNames(original);
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    var _loop = function _loop() {
      var name = _step.value;
      Object.defineProperty(proxy, name, {
        configurable: true,
        get: function get() {
          // @ts-ignore
          return original[name];
        },
        set: function set(nextVal) {
          // @ts-ignore
          original[name] = nextVal;
        }
      });
    };

    for (var _iterator = names[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      _loop();
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator["return"] != null) {
        _iterator["return"]();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }
}