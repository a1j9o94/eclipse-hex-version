import { makeHooksSystem } from "concubine";
import Entity from "./Entity";
import instantiate from "./instantiate";
/**
 * The hooks system used by Hex Engine to associate hook functions
 * with the current Component instance.
 */

var HooksSystem = makeHooksSystem()({
  useNewComponent: function useNewComponent(instance) {
    return function (componentFunction) {
      var child = instantiate(componentFunction, instance.entity);
      instance.entity.components.add(child);
      return child;
    };
  },
  useType: function useType(instance) {
    return (
      /**
       * Set the `type` of the current Component instance. This is *required*
       * for Component functions if you want to be able to find them using
       * `Entity.getComponent()`. When in doubt, always set this- there's no
       * reason not to.
       */
      function (type) {
        instance.type = type;

        if (type.name && instance.entity.name == null) {
          instance.entity.name = type.name;
        }
      }
    );
  },
  useEntity: function useEntity(instance) {
    return (
      /**
       * Get the Entity that this Component belongs to.
       */
      function () {
        return instance.entity;
      }
    );
  },
  useCurrentComponent: function useCurrentComponent(instance) {
    return (
      /**
       * Get the Component instance for the current Component function.
       */
      function () {
        return instance;
      }
    );
  },
  useCallbackAsCurrent: function useCallbackAsCurrent(instance) {
    return function (callback) {
      var func = function func() {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        return HooksSystem.withInstance(instance, function () {
          return callback.apply(void 0, args);
        });
      }; // To make debugging easier


      func.toString = function () {
        return "useCallbackAsCurrent(" + callback.toString() + ")";
      };

      return func;
    };
  },
  useChild: function useChild(instance) {
    return function (componentFunction) {
      var ent = instance.entity;
      return Entity._create(componentFunction, ent);
    };
  }
});
export default HooksSystem;