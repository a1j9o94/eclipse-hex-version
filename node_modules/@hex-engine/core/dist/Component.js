function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import { StorageForUseEnableDisable } from "./Hooks/useEnableDisable";

var Component =
/*#__PURE__*/
function () {
  function Component(entity) {
    _classCallCheck(this, Component);

    _defineProperty(this, "_kind", "component");

    _defineProperty(this, "type", null);

    _defineProperty(this, "entity", void 0);

    _defineProperty(this, "_isEnabled", true);

    _defineProperty(this, "_isEnabling", false);

    _defineProperty(this, "_isDisabling", false);

    this.entity = entity;
  }

  _createClass(Component, [{
    key: "enable",
    value: function enable() {
      if (this._isEnabled || this._isEnabling) return;
      this._isEnabling = true;
      var storage = this.entity.getComponent(StorageForUseEnableDisable);

      if (storage) {
        var componentStorage = storage.enableCallbacks.get(this);

        if (componentStorage) {
          componentStorage.forEach(function (callback) {
            return callback();
          });
        }
      }

      this._isEnabling = false;
      this._isEnabled = true;
    }
  }, {
    key: "disable",
    value: function disable() {
      if (!this._isEnabled || this._isDisabling) return;
      this._isDisabling = true;
      var storage = this.entity.getComponent(StorageForUseEnableDisable);

      if (storage) {
        var componentStorage = storage.disableCallbacks.get(this);

        if (componentStorage) {
          componentStorage.forEach(function (callback) {
            return callback();
          });
        }
      }

      this._isDisabling = false;
      this._isEnabled = false;
    }
  }, {
    key: "isEnabled",
    get: function get() {
      return this._isEnabled;
    },
    set: function set(nextVal) {
      if (Boolean(nextVal) === this._isEnabled) return;

      if (nextVal) {
        this.enable();
      } else {
        this.disable();
      }
    }
  }]);

  return Component;
}();

export { Component as default };