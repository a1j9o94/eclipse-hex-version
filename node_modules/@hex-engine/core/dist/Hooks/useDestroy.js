import HooksSystem from "../HooksSystem";
var _HooksSystem$hooks = HooksSystem.hooks,
    useCallbackAsCurrent = _HooksSystem$hooks.useCallbackAsCurrent,
    useEntity = _HooksSystem$hooks.useEntity,
    useType = _HooksSystem$hooks.useType,
    useNewComponent = _HooksSystem$hooks.useNewComponent;
export function StorageForUseDestroy() {
  useType(StorageForUseDestroy);
  return {
    callbacks: new Set()
  };
}
/**
 * Return an object with two functions on it: `onDestroy` and `destroy`.
 *
 * - `onDestroy` registers a function to be run if the current Entity is destroyed.
 * - `destroy` destroys the current Entity.
 */

export default function useDestroy() {
  var storage = useEntity().getComponent(StorageForUseDestroy) || useNewComponent(StorageForUseDestroy);
  return {
    /**
     * Destroy the current Entity and remove it from its parent.
     */
    destroy: useCallbackAsCurrent(function () {
      useEntity().destroy();
    }),

    /**
     * Register a function to be run when this Entity is destroyed.
     * @param callback The function to run.
     */
    onDestroy: function onDestroy(callback) {
      storage.callbacks.add(useCallbackAsCurrent(callback));
    }
  };
}