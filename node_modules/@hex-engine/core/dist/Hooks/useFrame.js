import HooksSystem from "../HooksSystem";
import useRootEntity from "./useRootEntity";
import useEnableDisable from "./useEnableDisable";
import RunLoop from "../Components/RunLoop";
import useNewRootComponent from "./useNewRootComponent";
var useCallbackAsCurrent = HooksSystem.hooks.useCallbackAsCurrent;
/**
 * Register a function to be called once every animation frame.
 *
 * If you are using `@hex-engine/2d`, you probably don't want to use this; use `useUpdate` or `useDraw` instead.
 * @param callback The function to be called once per frame.
 */

export default function useFrame(callback) {
  var root = useRootEntity();
  var runLoopApi = root.getComponent(RunLoop) || useNewRootComponent(RunLoop);
  var addFrameCallback = runLoopApi.addFrameCallback,
      removeFrameCallback = runLoopApi.removeFrameCallback;
  var wrappedCallback = useCallbackAsCurrent(callback);

  var _useEnableDisable = useEnableDisable(),
      onDisabled = _useEnableDisable.onDisabled,
      onEnabled = _useEnableDisable.onEnabled;

  onEnabled(function () {
    addFrameCallback(wrappedCallback);
  });
  onDisabled(function () {
    removeFrameCallback(wrappedCallback);
  });
}