function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import { useNewComponent, useType } from "@hex-engine/core";
import { useUpdate } from "../Hooks";
import Timer from "./Timer";
/**
 * A class that represents a single frame in an animation.
 *
 * The data that is in this frame can be anything.
 */

export var AnimationFrame = // in ms
function AnimationFrame(data, _ref) {
  var duration = _ref.duration,
      onFrame = _ref.onFrame;

  _classCallCheck(this, AnimationFrame);

  _defineProperty(this, "data", void 0);

  _defineProperty(this, "duration", void 0);

  _defineProperty(this, "onFrame", void 0);

  this.data = data;
  this.duration = duration;
  this.onFrame = onFrame || null;
};

/**
 * A Component that represents an Animation, where each frame has a duration and contains arbitrary data.
 */
export default function Animation(frames) {
  var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref2$loop = _ref2.loop,
      loop = _ref2$loop === void 0 ? true : _ref2$loop;

  useType(Animation);
  var timer = useNewComponent(Timer);
  timer.disable();
  var currentFrameIndex = 0;

  function getCurrentFrame() {
    return frames[currentFrameIndex];
  }

  var state = {
    loop: loop
  };
  useUpdate(function () {
    if (timer.hasReachedSetTime()) {
      if (currentFrameIndex === frames.length - 1) {
        if (state.loop) {
          currentFrameIndex = 0;
        } else {
          // Do nothing (stay on the last frame)
          return;
        }
      } else {
        currentFrameIndex++;
      }

      var currentFrame = getCurrentFrame();
      timer.setToTimeFromNow(currentFrame.duration);

      if (currentFrame.onFrame) {
        currentFrame.onFrame();
      }
    }
  });

  function goToFrame(frameNumber) {
    currentFrameIndex = frameNumber;
    var currentFrame = getCurrentFrame();
    timer.setToTimeFromNow(currentFrame.duration);

    if (currentFrame.onFrame) {
      currentFrame.onFrame();
    }
  }

  return {
    frames: frames,

    get loop() {
      return state.loop;
    },

    set loop(nextValue) {
      state.loop = nextValue;
    },

    get currentFrameIndex() {
      return currentFrameIndex;
    },

    get currentFrame() {
      return getCurrentFrame();
    },

    get currentFrameCompletion() {
      var currentFrame = getCurrentFrame();

      if (currentFrame.duration === 0) {
        return 1;
      }

      return 1 - timer.distanceFromSetTime() / getCurrentFrame().duration;
    },

    pause: function pause() {
      timer.disable();
    },
    resume: function resume() {
      timer.enable();
    },
    play: function play() {
      timer.enable();
      var currentFrame = getCurrentFrame();
      timer.setToTimeFromNow(currentFrame.duration);

      if (currentFrame.onFrame) {
        currentFrame.onFrame();
      }
    },
    restart: function restart() {
      timer.enable();
      goToFrame(0);
    },
    goToFrame: goToFrame
  };
}