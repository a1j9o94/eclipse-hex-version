import { useType } from "@hex-engine/core";
import { Vector } from "../Models";
import { useInspectorHoverOutline, useInspectorSelectEntity, useEntityTransforms, useDebugOverlayDrawTime } from "../Hooks";
var TAU = 2 * Math.PI;
/**
 * This Component provides information about the shape, position, rotation, origin, and scale
 * of the current Entity. It is used by `useDraw` and `Physics.Body`, among other things.
 *
 * You should only have one `Geometry` component per `Entity`.
 */

function Geometry(_ref) {
  var shape = _ref.shape,
      _ref$position = _ref.position,
      position = _ref$position === void 0 ? new Vector(0, 0) : _ref$position,
      _ref$rotation = _ref.rotation,
      rotation = _ref$rotation === void 0 ? 0 : _ref$rotation,
      _ref$scale = _ref.scale,
      scale = _ref$scale === void 0 ? new Vector(1, 1) : _ref$scale,
      _ref$origin = _ref.origin,
      origin = _ref$origin === void 0 ? undefined : _ref$origin;
  useType(Geometry);
  var transforms = useEntityTransforms();
  var rotationVal = rotation;

  if (rotationVal > TAU) {
    rotationVal = rotationVal % TAU;
  }

  var geometry = {
    shape: shape,
    position: position,

    get rotation() {
      return rotationVal;
    },

    set rotation(newVal) {
      if (newVal > TAU) {
        newVal = newVal % TAU;
      }

      rotationVal = newVal;
    },

    scale: scale,
    origin: origin || new Vector(0, 0),
    worldPosition: function worldPosition() {
      var matrix = transforms.matrixForWorldPosition();
      return new Vector(matrix.e, matrix.f);
    }
  };
  useDebugOverlayDrawTime();
  useInspectorHoverOutline(function () {
    return geometry.shape;
  });
  useInspectorSelectEntity(function () {
    return geometry;
  });
  return geometry;
}

export default Geometry;