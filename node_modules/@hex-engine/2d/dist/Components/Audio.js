function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import { useType } from "@hex-engine/core";
import Preloader from "../Preloader";

var Audio =
/*#__PURE__*/
function () {
  function Audio(config) {
    var _this = this;

    _classCallCheck(this, Audio);

    _defineProperty(this, "url", void 0);

    _defineProperty(this, "_loadingPromise", null);

    _defineProperty(this, "loaded", false);

    _defineProperty(this, "data", null);

    this.url = config.url;
    Preloader.addTask(function () {
      return _this.load();
    });
  }
  /**
   * Load this Audio file. Note that Audio files automatically start loading when they are created,
   * and no errors are thrown if you attempt to play an Audio file that hasn't loaded yet, so
   * in most cases, you do not need to call this function.
   */


  _createClass(Audio, [{
    key: "load",
    value: function load() {
      var _this2 = this;

      if (this.loaded) return Promise.resolve();
      if (this._loadingPromise) return this._loadingPromise;
      this._loadingPromise = new Promise(function (resolve, reject) {
        var image = document.createElement("audio");

        image.oncanplaythrough = function () {
          _this2.loaded = true;
          _this2.data = image;
          resolve();
        };

        image.onerror = function (event) {
          var error = new Error("Failed to load audio"); // @ts-ignore

          error.event = event;
          reject(error);
        };

        image.src = _this2.url;
      }).then(function () {
        _this2._loadingPromise = null;
      });
      return this._loadingPromise;
    }
    /** Play this audio clip, if it's loaded. If it isn't loaded yet, nothing will happen. */

  }, {
    key: "play",
    value: function play() {
      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          volume = _ref.volume;

      var data = this.data;
      if (!data) return Promise.resolve();

      if (volume != null) {
        data.volume = volume;
      }

      return data.play();
    }
  }]);

  return Audio;
}();
/**
 * A function that loads and plays a sound clip from a URL.
 *
 * You can get a URL for a sound clip by `import`ing it, as if it was code:
 *
 * ```ts
 * import mySound from "./my-sound.ogg";
 *
 * console.log(typeof mySound); // "string"
 *
 * useNewComponent(() => Audio({ url: mySound }));
 * ```
 *
 * When you import an audio clip in this way, it will be automatically
 * added to the build and included in the final build output.
 */


export default function AudioComponent(_ref2) {
  var url = _ref2.url;
  useType(AudioComponent);
  return new Audio({
    url: url
  });
}