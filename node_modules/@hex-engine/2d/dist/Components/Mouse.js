import { useType, useNewComponent, useCallbackAsCurrent, useEntity } from "@hex-engine/core";
import LowLevelMouse from "./LowLevelMouse";
import MousePosition from "./MousePosition";
import Geometry from "./Geometry";

/**
 * A Component that gives you information about where the Mouse is, relative to the current Entity,
 * and lets you register functions to be called when the mouse cursor interacts with the current Entity.
 */
export default function Mouse() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref$entity = _ref.entity,
      entity = _ref$entity === void 0 ? useEntity() : _ref$entity,
      _ref$geometry = _ref.geometry,
      geometry = _ref$geometry === void 0 ? entity.getComponent(Geometry) : _ref$geometry;

  useType(Mouse);

  if (process.env.NODE_ENV !== "production") {
    if (!geometry) {
      console.warn("Attempted to create a Mouse component with no associated Geometry. This Mouse component will not be useful.\nPlease either add a Geometry to the Entity before constructing the Mouse component, pass a Geometry into the Mouse component function, or use LowLevelMouse instead (which doesn't rely on Geometry).\nThis message will not be logged in production.");
    }
  }

  var storage = {
    onDownCallbacks: new Set(),
    onUpCallbacks: new Set(),
    onClickCallbacks: new Set(),
    onRightClickCallbacks: new Set(),
    onMiddleClickCallbacks: new Set()
  };

  var _useNewComponent = useNewComponent(LowLevelMouse),
      onMouseDown = _useNewComponent.onMouseDown,
      onMouseUp = _useNewComponent.onMouseUp;

  var mousePosition = useNewComponent(function () {
    return MousePosition({
      entity: entity,
      geometry: geometry
    });
  });
  var pressingLeft = false;
  var pressingRight = false;
  var pressingMiddle = false;
  onMouseDown(function (event) {
    if (!mousePosition.isInsideBounds) return;
    var buttons = event.buttons;

    if (buttons.left) {
      pressingLeft = true;
      storage.onDownCallbacks.forEach(function (callback) {
        return callback(event);
      });
    }

    if (buttons.right) {
      pressingRight = true;
    }

    if (buttons.middle) {
      pressingMiddle = true;
    }
  });
  onMouseUp(function (event) {
    var buttons = event.buttons;

    if (mousePosition.isInsideBounds) {
      if (pressingLeft && buttons.left) {
        storage.onClickCallbacks.forEach(function (callback) {
          return callback(event);
        });
      }

      if (pressingRight && buttons.right) {
        storage.onRightClickCallbacks.forEach(function (callback) {
          return callback(event);
        });
      }

      if (pressingMiddle && buttons.middle) {
        storage.onMiddleClickCallbacks.forEach(function (callback) {
          return callback(event);
        });
      }
    }

    if (buttons.left) {
      pressingLeft = false;
      storage.onUpCallbacks.forEach(function (callback) {
        return callback(event);
      });
    }

    if (buttons.right) {
      pressingRight = false;
    }

    if (buttons.middle) {
      pressingMiddle = false;
    }
  });
  var callbackSetters = {
    onDown: function onDown(callback) {
      storage.onDownCallbacks.add(useCallbackAsCurrent(callback));
    },
    onUp: function onUp(callback) {
      storage.onUpCallbacks.add(useCallbackAsCurrent(callback));
    },
    onClick: function onClick(callback) {
      storage.onClickCallbacks.add(useCallbackAsCurrent(callback));
    },
    onRightClick: function onRightClick(callback) {
      storage.onRightClickCallbacks.add(useCallbackAsCurrent(callback));
    },
    onMiddleClick: function onMiddleClick(callback) {
      storage.onMiddleClickCallbacks.add(useCallbackAsCurrent(callback));
    }
  };
  return {
    /**
     * A boolean indicating whether the mouse cursor is currently within the Entity, according
     * to the Shape on the Geometry this Component has been configured to use.
     */
    get isInsideBounds() {
      return mousePosition.isInsideBounds;
    },

    /**
     * A boolean indicating whether the left mouse button is currently being pressed.
     */
    get isPressingLeft() {
      return pressingLeft;
    },

    /**
     * A boolean indicating whether the right mouse button is currently being pressed.
     */
    get isPressingRight() {
      return pressingRight;
    },

    /**
     * A boolean indicating whether the middle mouse button is currently being pressed.
     */
    get isPressingMiddle() {
      return pressingMiddle;
    },

    /**
     * The current position of the mouse cursor, relative to the Entity this Component has been
     * configured to use.
     */
    get position() {
      return mousePosition.position;
    },

    /**
     * Registers a function to be called when the mouse cursor enters the configured Entity's bounds.
     *
     * The function will be called with a `HexMouseEvent`.
     */
    get onEnter() {
      return mousePosition.onEnter;
    },

    /**
     * Registers a function to be called whenever the mouse cursor moves,
     * *even if it is not within the Entity's bounds*.
     *
     * The function will be called with a `HexMouseEvent`.
     */
    get onMove() {
      return mousePosition.onMove;
    },

    /**
     * Registers a function to be called whenever the mouse cursor exits the configured Entity's bounds.
     *
     * The function will be called with a `HexMouseEvent`.
     */
    get onLeave() {
      return mousePosition.onLeave;
    },

    /**
     * Registers a function to be called whenever the _LEFT_ mouse button is pressed down
     * within the configured Entity's bounds.
     *
     * If you need an onDown event for a mouse button other than the left button, you will
     * have to use the `LowLevelMouse` Component instead.
     *
     * The function will be called with a `HexMouseEvent`.
     */
    get onDown() {
      return callbackSetters.onDown;
    },

    /**
     * Registers a function to be called whenever the _LEFT_ mouse button is released
     * within the configured Entity's bounds.
     *
     * If you need an onDown onUp for a mouse button other than the left button, you will
     * have to use the `LowLevelMouse` Component instead.
     *
     * The function will be called with a `HexMouseEvent`.
     */
    get onUp() {
      return callbackSetters.onUp;
    },

    /**
     * Registers a function to be called whenever the left mouse button is pressed
     * and then released within the configured Entity's bounds.
     *
     * The function will be called with a `HexMouseEvent`.
     */
    get onClick() {
      return callbackSetters.onClick;
    },

    /**
     * Registers a function to be called whenever the right mouse button is pressed
     * and then released within the configured Entity's bounds.
     *
     * The function will be called with a `HexMouseEvent`.
     */
    get onRightClick() {
      return callbackSetters.onRightClick;
    },

    /**
     * Registers a function to be called whenever the middle mouse button is pressed
     * and then released within the configured Entity's bounds.
     *
     * The function will be called with a `HexMouseEvent`.
     */
    get onMiddleClick() {
      return callbackSetters.onMiddleClick;
    }

  };
}