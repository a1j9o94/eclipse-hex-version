import { useType } from "@hex-engine/core";
import { useUpdate } from "../Hooks";
import { Vector } from "../Models";
/** This Component provides the current state of a connected Gamepad, if present. */

export default function Gamepad() {
  var _options$deadzone, _options$buttonNames;

  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  useType(Gamepad);
  var state = {
    /** A `Vector` indicating which direction the left stick is being pressed in, and how far it's being pressed. */
    leftStick: new Vector(0, 0),

    /** A `Vector` indicating which direction the right stick is being pressed in, and how far it's being pressed. */
    rightStick: new Vector(0, 0),

    /** A Set containing all the names of the currently pressed buttons. */
    pressed: new Set(),

    /**
     * A boolean indicating whether a gamepad is connected.
     *
     * Note that the way the Web Gamepad API works, controllers do not show as connected
     * until the user first presses a button.
     */
    present: false,

    /**
     * The configured deadzone for the gamepad; that is, a number
     * used as a minimum value that the analog sticks must be moved
     * from their center position before their effective position is
     * considered different from the center position.
     */
    deadzone: (_options$deadzone = options.deadzone) !== null && _options$deadzone !== void 0 ? _options$deadzone : 0.1,

    /**
     * The configured button names for the gamepad. These names coorespond to button indices
     * in the Web Gamepad API, and will be used in the `pressed` Set.
     */
    buttonNames: (_options$buttonNames = options.buttonNames) !== null && _options$buttonNames !== void 0 ? _options$buttonNames : ["cross", "circle", "square", "triangle", "l1", "r1", "l2", "r2", "select", "start", "l3", "r3", "up", "down", "left", "right", "home"]
  };

  function buttonName(index) {
    return state.buttonNames[index] || "unknown button";
  }

  useUpdate(function () {
    var _options$gamepadIndex;

    var gamepad = navigator.getGamepads()[(_options$gamepadIndex = options.gamepadIndex) !== null && _options$gamepadIndex !== void 0 ? _options$gamepadIndex : 0];

    if (gamepad == null) {
      state.present = false;
      return;
    }

    state.present = true;
    state.leftStick.x = gamepad.axes[0];
    state.leftStick.y = gamepad.axes[1];
    state.rightStick.x = gamepad.axes[2];
    state.rightStick.y = gamepad.axes[3];
    gamepad.buttons.forEach(function (button, index) {
      var name = buttonName(index);

      if (button.pressed) {
        state.pressed.add(name);
      } else {
        state.pressed["delete"](name);
      }
    });
  });
  return state;
}