function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import Vector from "./Vector";
/**
 * Represents a two-dimensional Grid with arbitrary contents in
 * each cell.
 */

var Grid =
/*#__PURE__*/
function () {
  function Grid(rowsOrRowsAndCols, columnsOrDefaultValue, maybeDefaultValue) {
    _classCallCheck(this, Grid);

    _defineProperty(this, "_kind", "grid");

    _defineProperty(this, "size", void 0);

    _defineProperty(this, "data", void 0);

    _defineProperty(this, "defaultValue", void 0);

    var rows, columns, defaultValue;

    if (typeof rowsOrRowsAndCols === "number" && typeof columnsOrDefaultValue === "number") {
      rows = rowsOrRowsAndCols;
      columns = columnsOrDefaultValue;
      defaultValue = maybeDefaultValue;
    } else {
      rows = rowsOrRowsAndCols.x;
      columns = rowsOrRowsAndCols.y;
      defaultValue = maybeDefaultValue;
    }

    this.data = Array(columns).fill(defaultValue).map(function () {
      return Array(rows).fill(defaultValue);
    });
    this.defaultValue = defaultValue;
    this.size = new Vector(rows, columns);
  }
  /** Fill in the grid with the provided data, represented as a 2D array. */


  _createClass(Grid, [{
    key: "setData",
    value: function setData(data) {
      var currentX = 0;
      var currentY = 0;
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = data[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var item = _step.value;

          if (currentX + 1 > this.size.x) {
            currentY++;
            currentX = 0;
          }

          this.set(currentX, currentY, item);
          currentX++;
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator["return"] != null) {
            _iterator["return"]();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }
    }
    /** Get the value in the cell at the given row and column index. */

  }, {
    key: "get",
    value: function get(rowOrPos, maybeColumn) {
      var row, column;

      if (typeof rowOrPos === "number" && typeof maybeColumn === "number") {
        row = rowOrPos;
        column = maybeColumn;
      } else {
        row = rowOrPos.x;
        column = rowOrPos.y;
      }

      if (row > this.size.x - 1 || row < 0 || column > this.size.y - 1 || column < 0) {
        return this.defaultValue;
      } else {
        return this.data[column][row];
      }
    }
    /** Set the value in the cell at the given row and column index. */

  }, {
    key: "set",
    value: function set(rowOrPos, columnOrValue, maybeValue) {
      var row, column, value;

      if (typeof rowOrPos === "number" && typeof columnOrValue === "number") {
        row = rowOrPos;
        column = columnOrValue;
        value = maybeValue;
      } else {
        row = rowOrPos.x;
        column = rowOrPos.y;
        value = columnOrValue;
      }

      if (row > this.size.x - 1 || row < 0 || column > this.size.y - 1 || column < 0) {
        throw new Error("Attempted to set data into grid of size '".concat(this.size.x, ", ").concat(this.size.y, "' at out-of-bounds index: ").concat(row, ", ").concat(column));
      } else {
        this.data[column][row] = value;
      }
    }
    /** Returns an iterable of all the contents of this grid and their row and column indices. */

  }, {
    key: "contents",
    value:
    /*#__PURE__*/
    regeneratorRuntime.mark(function contents() {
      var i, j;
      return regeneratorRuntime.wrap(function contents$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              i = 0;

            case 1:
              if (!(i < this.size.x)) {
                _context.next = 12;
                break;
              }

              j = 0;

            case 3:
              if (!(j < this.size.y)) {
                _context.next = 9;
                break;
              }

              _context.next = 6;
              return [i, j, this.get(i, j)];

            case 6:
              j++;
              _context.next = 3;
              break;

            case 9:
              i++;
              _context.next = 1;
              break;

            case 12:
            case "end":
              return _context.stop();
          }
        }
      }, contents, this);
    })
  }]);

  return Grid;
}();

export { Grid as default };