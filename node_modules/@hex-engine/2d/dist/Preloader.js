function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var disposeReturnValue = function disposeReturnValue() {};
/**
 * A class that helps ensure used resources are loaded before they are used.
 *
 * When resources that must be fetched over the network are created (such as Images and Audio),
 * they register themselves with thie Preloader. To wait until all registered resources have been
 * loaded, use `Preloader.load().then(() => {})`.
 */


var Preloader =
/*#__PURE__*/
function () {
  function Preloader() {
    _classCallCheck(this, Preloader);

    _defineProperty(this, "_currentPromise", Promise.resolve());
  }

  _createClass(Preloader, [{
    key: "addTask",

    /** Adds a new task to the Preloader. It will start running immediately. */
    value: function addTask(task) {
      if (this._currentPromise) {
        this._currentPromise = Promise.all([this._currentPromise, task()]).then(disposeReturnValue);
        return this._currentPromise;
      }

      this._currentPromise = task().then(disposeReturnValue);
      return this._currentPromise;
    }
    /** Returns a Promise which does not resolve until all tasks that have been added to the Preloader have resolved. */

  }, {
    key: "load",
    value: function load() {
      return this._currentPromise;
    }
  }]);

  return Preloader;
}();

var singleton = new Preloader();
export default singleton;