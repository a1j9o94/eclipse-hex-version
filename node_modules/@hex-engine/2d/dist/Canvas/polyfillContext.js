function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

import { createSVGMatrix } from "../Models/TransformMatrix"; // Based on code from https://stackoverflow.com/a/7397026/868460
// polyfills resetTransform and getTransform on the context

export default function polyfillContext(context) {
  // @ts-ignore condition is always true
  if (context.resetTransform && context.getTransform) return;
  var matrix = createSVGMatrix(); // the stack of saved matrices

  var savedMatrices = [matrix];
  var CanvasRenderingContext2DClass = context.constructor;

  var PolyfilledCanvasRenderingContext2D =
  /*#__PURE__*/
  function (_CanvasRenderingConte) {
    _inherits(PolyfilledCanvasRenderingContext2D, _CanvasRenderingConte);

    function PolyfilledCanvasRenderingContext2D() {
      _classCallCheck(this, PolyfilledCanvasRenderingContext2D);

      return _possibleConstructorReturn(this, _getPrototypeOf(PolyfilledCanvasRenderingContext2D).apply(this, arguments));
    }

    _createClass(PolyfilledCanvasRenderingContext2D, [{
      key: "save",
      value: function save() {
        savedMatrices.push(matrix);

        _get(_getPrototypeOf(PolyfilledCanvasRenderingContext2D.prototype), "save", this).call(this);
      } // if the stack of matrices we're managing doesn't have a saved matrix,
      // we won't even call the context's original `restore` method.

    }, {
      key: "restore",
      value: function restore() {
        if (savedMatrices.length == 0) return;

        _get(_getPrototypeOf(PolyfilledCanvasRenderingContext2D.prototype), "restore", this).call(this); // @ts-ignore this is safe because we early return if the stack is zero


        matrix = savedMatrices.pop();

        _get(_getPrototypeOf(PolyfilledCanvasRenderingContext2D.prototype), "setTransform", this).call(this, matrix.a, matrix.b, matrix.c, matrix.d, matrix.e, matrix.f);
      }
    }, {
      key: "scale",
      value: function scale(x, y) {
        matrix = matrix.scaleNonUniform(x, y);

        _get(_getPrototypeOf(PolyfilledCanvasRenderingContext2D.prototype), "scale", this).call(this, x, y);
      }
    }, {
      key: "rotate",
      value: function rotate(theta) {
        // canvas `rotate` uses radians, DOMMatrix uses degrees.
        matrix = matrix.rotate(theta * 180 / Math.PI);

        _get(_getPrototypeOf(PolyfilledCanvasRenderingContext2D.prototype), "rotate", this).call(this, theta);
      }
    }, {
      key: "translate",
      value: function translate(x, y) {
        matrix = matrix.translate(x, y);

        _get(_getPrototypeOf(PolyfilledCanvasRenderingContext2D.prototype), "translate", this).call(this, x, y);
      }
    }, {
      key: "setTransform",
      value: function setTransform() {
        matrix = createSVGMatrix();

        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        var aOrTransform = args[0],
            b = args[1],
            c = args[2],
            d = args[3],
            e = args[4],
            f = args[5];

        if (_typeof(aOrTransform) === "object") {
          var _transform = aOrTransform;
          Object.assign(matrix, _transform);

          _get(_getPrototypeOf(PolyfilledCanvasRenderingContext2D.prototype), "setTransform", this).call(this, _transform);
        } else if (typeof aOrTransform === "number") {
          var _a = aOrTransform; // 2x2 scale-skew matrix

          matrix.a = aOrTransform;
          matrix.b = b;
          matrix.c = c;
          matrix.d = d; // translation vector

          matrix.e = e;
          matrix.f = f;

          _get(_getPrototypeOf(PolyfilledCanvasRenderingContext2D.prototype), "setTransform", this).call(this, _a, b, c, d, e, f);
        } else {
          var _get2;

          (_get2 = _get(_getPrototypeOf(PolyfilledCanvasRenderingContext2D.prototype), "setTransform", this)).call.apply(_get2, [this].concat(args));
        }

        savedMatrices = [matrix];
      }
    }, {
      key: "transform",
      value: function transform(a, b, c, d, e, f) {
        var rhs = createSVGMatrix(); // 2x2 scale-skew matrix

        rhs.a = a;
        rhs.b = b;
        rhs.c = c;
        rhs.d = d; // translation vector

        rhs.e = e;
        rhs.f = f;
        matrix = matrix.multiply(rhs);

        _get(_getPrototypeOf(PolyfilledCanvasRenderingContext2D.prototype), "transform", this).call(this, a, b, c, d, e, f);
      }
    }, {
      key: "resetTransform",
      value: function resetTransform() {
        matrix = createSVGMatrix();

        if (typeof _get(_getPrototypeOf(PolyfilledCanvasRenderingContext2D.prototype), "resetTransform", this) === "function") {
          _get(_getPrototypeOf(PolyfilledCanvasRenderingContext2D.prototype), "resetTransform", this).call(this);
        } else {
          // Identity matrix
          _get(_getPrototypeOf(PolyfilledCanvasRenderingContext2D.prototype), "setTransform", this).call(this, 1, 0, 0, 1, 0, 0);
        }
      }
    }, {
      key: "getTransform",
      value: function getTransform() {
        return matrix;
      }
    }]);

    return PolyfilledCanvasRenderingContext2D;
  }(CanvasRenderingContext2DClass);

  Object.setPrototypeOf(context, PolyfilledCanvasRenderingContext2D.prototype);
  return context;
}