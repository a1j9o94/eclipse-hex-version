function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

/// <reference types="@test-it/core/globals" />
import { createRoot, useNewComponent } from "@hex-engine/core";
import Inspector from "@hex-engine/inspector";
import Canvas from "./index";
it("canvas background color",
/*#__PURE__*/
_asyncToGenerator(
/*#__PURE__*/
regeneratorRuntime.mark(function _callee() {
  var rootEnt, inspector;
  return regeneratorRuntime.wrap(function _callee$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          rootEnt = createRoot(function () {
            useNewComponent(function () {
              return Canvas({
                backgroundColor: "#006400"
              });
            });
          });
          inspector = rootEnt.getComponent(Inspector);
          inspector.hide();
          _context.t0 = expect;
          _context.next = 6;
          return TestIt.captureScreenshot();

        case 6:
          _context.t1 = _context.sent;
          (0, _context.t0)(_context.t1).toMatchImageSnapshot();

        case 8:
        case "end":
          return _context.stop();
      }
    }
  }, _callee);
})));