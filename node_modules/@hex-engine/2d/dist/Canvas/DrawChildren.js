function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

import { useCallbackAsCurrent, useEntity, useFrame, useType, useNewComponent, useCurrentComponent, useRootEntity, useNewRootComponent } from "@hex-engine/core";
import { useCanvasDrawOrderSort } from "./DrawOrder";
import useContext from "../Hooks/useContext";

function StorageForDrawChildren() {
  useType(StorageForDrawChildren);
  return {
    callbacksByComponent: new WeakMap()
  };
}
/**
 * Registers a function to be called once a frame, after all `useUpdate` functions have been called.
 *
 * Unlike `useDraw`, `useRawDraw` does *not* transform the context by the current Entity's matrix transform.
 *
 * In most cases, you should use `useDraw` instead of `useRawDraw`.
 */


export function useRawDraw(callback) {
  var storage = useRootEntity().getComponent(StorageForDrawChildren) || useNewRootComponent(StorageForDrawChildren);
  var component = useCurrentComponent();
  var storageForComponent;
  var maybeStorageForComponent = storage.callbacksByComponent.get(component);

  if (maybeStorageForComponent) {
    storageForComponent = maybeStorageForComponent;
  } else {
    storageForComponent = new Set();
    storage.callbacksByComponent.set(component, storageForComponent);
  }

  storageForComponent.add(useCallbackAsCurrent(callback));
}
/**
 * Iterates over all the descendant Entities, and calls their registered
 * draw callbacks, in the order specified by the Canvas.DrawOrder component
 * on the root Entity, or a default order if there is no such component.
 */

export function DrawChildren(_ref) {
  var backgroundColor = _ref.backgroundColor;
  useType(DrawChildren);
  var context = useContext();
  var storage = useNewComponent(StorageForDrawChildren);

  function drawComponent(component) {
    if (component.isEnabled) {
      var maybeStorageForComponent = storage.callbacksByComponent.get(component);

      if (maybeStorageForComponent) {
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = maybeStorageForComponent[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var drawCallback = _step.value;
            drawCallback(context);
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator["return"] != null) {
              _iterator["return"]();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }
      }
    }
  }

  useFrame(function () {
    // Reset transform
    context.resetTransform(); // Clear canvas

    if (backgroundColor != null) {
      context.fillStyle = backgroundColor;
      context.fillRect(0, 0, context.canvas.width, context.canvas.height);
    }

    var sort = useCanvasDrawOrderSort();
    var ent = useEntity();
    var ents = [ent].concat(_toConsumableArray(ent.descendants()));
    var components = sort(ents);
    var _iteratorNormalCompletion2 = true;
    var _didIteratorError2 = false;
    var _iteratorError2 = undefined;

    try {
      for (var _iterator2 = components[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
        var component = _step2.value;
        drawComponent(component);
      }
    } catch (err) {
      _didIteratorError2 = true;
      _iteratorError2 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
          _iterator2["return"]();
        }
      } finally {
        if (_didIteratorError2) {
          throw _iteratorError2;
        }
      }
    }
  });
}