function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

import { useCallbackAsCurrent, useFrame, useType, useEntity, useRootEntity, useCurrentComponent, useNewComponent, useNewRootComponent } from "@hex-engine/core";

function StorageForUpdateChildren() {
  useType(StorageForUpdateChildren);
  return {
    callbacksByComponent: new WeakMap()
  };
}
/**
 * Once a frame, iterates over all of the current Entity's descendant Entities, calling
 * any update functions registered by their Components.
 */


function UpdateChildren() {
  useType(UpdateChildren);
  var storage = useNewComponent(StorageForUpdateChildren);
  useFrame(function (delta) {
    var ent = useEntity();
    var ents = [ent].concat(_toConsumableArray(ent.descendants()));
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = ents[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var _ent = _step.value;
        var _iteratorNormalCompletion2 = true;
        var _didIteratorError2 = false;
        var _iteratorError2 = undefined;

        try {
          for (var _iterator2 = _ent.components[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
            var component = _step2.value;

            if (component.isEnabled) {
              var maybeUpdateCallbacks = storage.callbacksByComponent.get(component);

              if (maybeUpdateCallbacks) {
                var _iteratorNormalCompletion3 = true;
                var _didIteratorError3 = false;
                var _iteratorError3 = undefined;

                try {
                  for (var _iterator3 = maybeUpdateCallbacks[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                    var updateCallback = _step3.value;
                    updateCallback(delta);
                  }
                } catch (err) {
                  _didIteratorError3 = true;
                  _iteratorError3 = err;
                } finally {
                  try {
                    if (!_iteratorNormalCompletion3 && _iterator3["return"] != null) {
                      _iterator3["return"]();
                    }
                  } finally {
                    if (_didIteratorError3) {
                      throw _iteratorError3;
                    }
                  }
                }
              }
            }
          }
        } catch (err) {
          _didIteratorError2 = true;
          _iteratorError2 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
              _iterator2["return"]();
            }
          } finally {
            if (_didIteratorError2) {
              throw _iteratorError2;
            }
          }
        }
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator["return"] != null) {
          _iterator["return"]();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }
  });
}
/**
 * Registers a function to be called once every frame, prior to drawing.
 *
 * The function will receive a single argument, `delta`, which is the number of milliseconds
 * that have passed since the last frame was rendered.
 */


export default function useUpdate(callback) {
  useRootEntity().getComponent(UpdateChildren) || useNewRootComponent(UpdateChildren);
  var storage = useRootEntity().getComponent(StorageForUpdateChildren) || useNewRootComponent(StorageForUpdateChildren);
  var component = useCurrentComponent();
  var storageForComponent;
  var maybeStorageForComponent = storage.callbacksByComponent.get(component);

  if (maybeStorageForComponent) {
    storageForComponent = maybeStorageForComponent;
  } else {
    storageForComponent = new Set();
    storage.callbacksByComponent.set(component, storageForComponent);
  }

  storageForComponent.add(useCallbackAsCurrent(callback));
}