import { useRootEntity, useType, useCurrentComponent, useCallbackAsCurrent, useNewRootComponent } from "@hex-engine/core";
import { useUpdate } from ".";
import useWindowSize from "./useWindowSize";
import useContext from "./useContext";
import { Vector } from "../Models";

function StorageForCanvasSize() {
  useType(StorageForCanvasSize);
  var context = useContext();
  var listeners = new Set();
  var size = new Vector(context.canvas.width, context.canvas.height);
  var changePending = false;
  useWindowSize().onWindowResize(function () {
    if (context.canvas.width !== size.x) {
      size.x = context.canvas.width;
      changePending = true;
    }

    if (context.canvas.height !== size.y) {
      size.y = context.canvas.height;
      changePending = true;
    }
  });
  useUpdate(function () {
    if (changePending) {
      changePending = false;
      listeners.forEach(function (callback) {
        return callback();
      });
    }
  });

  function resizeCanvas(_ref) {
    var realWidth = _ref.realWidth,
        realHeight = _ref.realHeight,
        pixelWidth = _ref.pixelWidth,
        pixelHeight = _ref.pixelHeight;
    context.canvas.width = pixelWidth;
    context.canvas.height = pixelHeight;
    context.canvas.style.width = typeof realWidth === "number" ? realWidth + "px" : realWidth;
    context.canvas.style.height = typeof realHeight === "number" ? realHeight + "px" : realHeight;
    size.x = pixelWidth;
    size.y = pixelHeight;
    listeners.forEach(function (callback) {
      return callback();
    });
  }

  return {
    listeners: listeners,
    size: size,
    resizeCanvas: resizeCanvas
  };
}
/**
 * Returns an object with three properties on it:
 * - `canvasSize: Vector`: A Vector that will get mutated such that it always equals the current canvas size
 * - `onCanvasResize(() => void): void`: A function that lets you register
 * a function to be run every time the canvas size changes.
 * - `resizeCanvas: ({
 *      realWidth: number | string,
 *      realHeight: number| string,
 *      pixelWidth: number,
 *      pixelHeight: number
 *    }) => void`: A function that resizes the canvas.
 */


export default function useCanvasSize() {
  var storage = useRootEntity().getComponent(StorageForCanvasSize) || useNewRootComponent(StorageForCanvasSize);
  return {
    canvasSize: storage.size,
    onCanvasResize: function onCanvasResize(callback) {
      var component = useCurrentComponent();
      var wrapped = useCallbackAsCurrent(callback);
      storage.listeners.add(function () {
        if (component.isEnabled) {
          wrapped();
        }
      });
    },
    resizeCanvas: storage.resizeCanvas
  };
}