import { useRootEntity, useType, useCallbackAsCurrent, useCurrentComponent, useNewRootComponent } from "@hex-engine/core";
import { useUpdate, useContext } from ".";
import { Vector } from "../Models";

function StorageForWindowSize() {
  var _canvas$ownerDocument;

  useType(StorageForWindowSize);

  var _useContext = useContext(),
      canvas = _useContext.canvas;

  var win = (_canvas$ownerDocument = canvas.ownerDocument) === null || _canvas$ownerDocument === void 0 ? void 0 : _canvas$ownerDocument.defaultView;

  if (!win) {
    throw new Error("Root canvas is not part of a document; therefore, useWindowSize can't setup event listeners");
  }

  var size = new Vector(win.innerWidth, win.innerHeight);
  var listeners = new Set();
  var changePending = false;
  win.addEventListener("resize", function () {
    if (win.innerWidth !== size.x) {
      size.x = win.innerWidth;
      changePending = true;
    }

    if (win.innerHeight !== size.y) {
      size.y = win.innerHeight;
      changePending = true;
    }
  });
  useUpdate(function () {
    if (changePending) {
      listeners.forEach(function (callback) {
        return callback();
      });
      changePending = false;
    }
  });
  return {
    size: size,
    listeners: listeners
  };
}
/**
 * Returns an object with two properties on it:
 * - `windowSize: ReadOnlyVector`: A Vector that will get mutated such that it always equals the window size (so you shouldn't mutate it yourself)
 * - `onWindowResize(() => void): void`: A function that lets you register
 * a function to be run every time the window size changes.
 */


export default function useWindowSize() {
  var storage = useRootEntity().getComponent(StorageForWindowSize) || useNewRootComponent(StorageForWindowSize);
  return {
    windowSize: storage.size,
    onWindowResize: function onWindowResize(callback) {
      var component = useCurrentComponent();
      var wrapped = useCallbackAsCurrent(callback);
      storage.listeners.add(function () {
        if (component.isEnabled) {
          wrapped();
        }
      });
    }
  };
}