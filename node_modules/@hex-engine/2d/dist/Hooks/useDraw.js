import { useRawDraw } from "../Canvas";
import useEntityTransforms from "./useEntityTransforms";
/**
 * Register a function to be called once per frame, after all `useUpdate` functions have been called.
 * The function will receive a 2d canvas context it can draw into.
 *
 * The context you receive will already be rotated and translated such that position 0, 0 is the upper-left
 * corner of the current Entity, so in most cases, you will not need to worry about x/y positioning.
 */

export default function useDraw(onDraw) {
  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref$roundToNearestPi = _ref.roundToNearestPixel,
      roundToNearestPixel = _ref$roundToNearestPi === void 0 ? false : _ref$roundToNearestPi;

  var transforms = useEntityTransforms();
  useRawDraw(function (context) {
    context.save();
    var matrix = transforms.matrixForDrawPosition(roundToNearestPixel);
    context.transform(matrix.a, matrix.b, matrix.c, matrix.d, matrix.e, matrix.f);
    onDraw(context);
    context.restore();
  });
}