"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
function makeHooksSystem() {
    return function provideHookThunks(hooks, config) {
        if (config === void 0) { config = {}; }
        var currentInstance = null;
        // @ts-ignore
        var resolvedHooks = {};
        var _loop_1 = function (name_1) {
            if (hooks.hasOwnProperty(name_1)) {
                // @ts-ignore
                resolvedHooks[name_1] = function () {
                    var args = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        args[_i] = arguments[_i];
                    }
                    if (currentInstance == null) {
                        throw new Error(config.hookUsedOutsideOfWithInstanceErrorMessage ||
                            "Attempted to use a hook function, but there was no active instance.");
                    }
                    return hooks[name_1](currentInstance).apply(void 0, __spread(args));
                };
            }
        };
        for (var name_1 in hooks) {
            _loop_1(name_1);
        }
        return {
            withInstance: function (instance, callback) {
                if (config.prepareInstance) {
                    config.prepareInstance(instance);
                }
                var lastInstance = currentInstance;
                currentInstance = instance;
                var ret;
                try {
                    ret = callback();
                }
                finally {
                    if (config.releaseInstance) {
                        config.releaseInstance(instance);
                    }
                    currentInstance = lastInstance;
                }
                return ret;
            },
            hooks: resolvedHooks,
        };
    };
}
exports.makeHooksSystem = makeHooksSystem;
