"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var fs_1 = __importDefault(require("fs"));
var path_1 = __importDefault(require("path"));
var babel = __importStar(require("@babel/core"));
var mime_types_1 = __importDefault(require("mime-types"));
var debug_1 = __importDefault(require("debug"));
var debug = debug_1.default("kame/default-loader");
function defaultLoader(filename) {
    debug("Loading " + filename);
    var extension = path_1.default.extname(filename);
    switch (extension) {
        case ".json": {
            return "module.exports = " + fs_1.default.readFileSync(filename, "utf-8");
        }
        case ".css": {
            var content = fs_1.default.readFileSync(filename, "utf-8");
            return "\n        var style = document.createElement(\"style\");\n        style.type = \"text/css\";\n        style.textContent = " + JSON.stringify(content) + ";\n        document.head.appendChild(style);\n      ";
        }
        case ".js":
        case ".jsx":
        case ".mjs":
        case ".ts":
        case ".tsx": {
            debug("js case");
            if (filename.match(/node_modules/)) {
                debug("js case uncompiled");
                return fs_1.default.readFileSync(filename, "utf-8");
            }
            var config = {
                sourceType: "unambiguous",
                presets: [
                    ["@babel/preset-env", { modules: false }],
                    "@babel/preset-react",
                ],
                plugins: [
                    "@babel/plugin-proposal-class-properties",
                    "@babel/plugin-proposal-nullish-coalescing-operator",
                    "@babel/plugin-proposal-optional-chaining",
                    "@babel/plugin-transform-modules-commonjs",
                ],
                filename: filename,
            };
            if (extension === ".ts" || extension === ".tsx") {
                config.presets.push("@babel/preset-typescript");
            }
            else {
                config.plugins.push("@babel/plugin-transform-flow-strip-types");
            }
            var result = babel.transformFileSync(filename, config);
            debug("js case compiled");
            return (result === null || result === void 0 ? void 0 : result.code) || "";
        }
        default: {
            debug("default case");
            var type = mime_types_1.default.lookup(extension) || "application/octet-stream";
            var base64 = fs_1.default.readFileSync(filename, "base64");
            var url = "data:" + type + ";base64," + base64;
            return "module.exports = " + JSON.stringify(url);
        }
    }
}
exports.default = defaultLoader;
