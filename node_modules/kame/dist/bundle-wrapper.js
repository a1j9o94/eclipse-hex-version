"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function withGlobal(bodyCode) {
    return "(function(global) {\n" + bodyCode + "\n})(\n\ttypeof global !== \"undefined\" ? global :\n\ttypeof window !== \"undefined\" ? window :\n\ttypeof self !== \"undefined\" ? self :\n\ttypeof this === \"object\" ? this :\n\tnew Function(\"return this\")()\n);\n";
}
function umdWrapper(globalName, bodyCode) {
    return withGlobal("\nfunction factory() {\n" + bodyCode + "\n}\n\nif (typeof exports === 'object' && typeof module !== 'undefined') {\n\tmodule.exports = factory();\n} else if (typeof define === 'function' && define.amd) {\n\tdefine([], factory);\n} else {\n\t" + (globalName == null
        ? "factory()"
        : "global[" + JSON.stringify(globalName) + "] = factory();") + "\n}\n");
}
function stringifyModules(modules) {
    return "{\n" + Object.keys(modules)
        .map(function (key, index, all) {
        return "/* --- " + key + " --- */\n" + JSON.stringify(key) + ": (function (exports, _kame_require_, module, __filename, __dirname, _kame_dynamic_import_) {\n" + modules[key] + "\n})" + (index === all.length - 1 ? "" : ",");
    })
        .join("\n") + "\n/* --- end of modules --- */}";
}
function entryWrapper(_a) {
    var entryId = _a.entryId, globalName = _a.globalName, codeSplittingId = _a.codeSplittingId, modules = _a.modules, chunkUrls = _a.chunkUrls;
    var hasChunks = Object.keys(chunkUrls).length > 0;
    return umdWrapper(globalName, "var modules = " + stringifyModules(modules) + ";\n\nvar __kame__ = {\n\tbasedir: typeof __dirname === 'string' ? __dirname : \"\",\n\tcache: {},\n\trunModule: function runModule(name, isMain) {\n\t\tvar exports = {};\n\t\tvar module = {\n\t\t\tid: name,\n\t\t\texports: exports,\n\t\t};\n\n\t\t__kame__.cache[name] = module;\n\n\t\tvar _kame_require_ = function require(id) {\n\t\t\tif (__kame__.cache[id]) {\n\t\t\t\treturn __kame__.cache[id].exports;\n\t\t\t} else {\n\t\t\t\t__kame__.runModule(id, false);\n\t\t\t\treturn __kame__.cache[id].exports;\n\t\t\t}\n\t\t};\n\t\t_kame_require_.cache = __kame__.cache;\n\n\t\tif (isMain) {\n\t\t\t_kame_require_.main = module;\n\t\t}\n\n\t\tvar __filename = __kame__.basedir + \"/\" + name;\n\t\tvar __dirname = __kame__.basedir + \"/\" + name.split(\"/\").slice(0, -1).join(\"/\");\n\n\t\t" + (hasChunks
        ? "var _kame_dynamic_import_ = function dynamicImport(id) {\n\t\t\treturn __kame__.loadChunk(id).then(function() { return _kame_require_(id) });\n\t\t}"
        : "") + "\n\n\t\t__kame__.modules[name](exports, _kame_require_, module, __filename, __dirname " + (hasChunks ? ", _kame_dynamic_import_" : "") + ");\n\t\treturn module.exports;\n\t},\n\t" + (hasChunks
        ? "\n\tchunkUrls: " + JSON.stringify(chunkUrls, null, 2) + ",\n\tloadChunk: function loadChunk(id) {\n\t\tvar resolve, reject;\n\t\tvar p = new Promise(function (_resolve, _reject) {\n\t\t\tresolve = _resolve;\n\t\t\treject = _reject;\n\t\t});\n\t\t__kame__.pendingChunks[id] = {\n\t\t\tresolve: resolve,\n\t\t};\n\n\t\tvar url = __kame__.basedir\n\t\t\t? __kame__.basedir + \"/\" + __kame__.chunkUrls[id]\n\t\t\t: __kame__.chunkUrls[id];\n\n\t\tif (typeof require !== \"undefined\") {\n\t\t\ttry {\n\t\t\t\tPromise.resolve().then(function () {\n\t\t\t\t\treturn require(url);\n\t\t\t\t});\n\t\t\t} catch (err) {\n\t\t\t\treject(err);\n\t\t\t}\n\t\t} else {\n\t\t\ttry {\n\t\t\t\tfetch(url).then(function (response) {\n\t\t\t\t\treturn response.text();\n\t\t\t\t}).then(function (code) {\n\t\t\t\t\teval(code);\n\t\t\t\t}).catch(reject);\n\t\t\t} catch (err) {\n\t\t\t\treject(err);\n\t\t\t}\n\t\t}\n\t\treturn p;\n\t},\n\tpendingChunks: {},\n\tresolveChunk: function resolveChunk(id) {\n\t\tif (__kame__.pendingChunks[id]) {\n\t\t\t__kame__.pendingChunks[id].resolve();\n\t\t}\n\t},\n\n\t"
        : "") + "\n\tmodules: modules,\n};\n\n" + (hasChunks
        ? "global.__kame_instances__ = global.__kame_instances__ || {}; global.__kame_instances__[" + JSON.stringify(codeSplittingId) + "] = __kame__;"
        : "") + "\n\nreturn __kame__.runModule(" + JSON.stringify(entryId) + ", true);");
}
exports.entryWrapper = entryWrapper;
function chunkWrapper(_a) {
    var entryId = _a.entryId, modules = _a.modules, codeSplittingId = _a.codeSplittingId;
    return withGlobal("\nvar modules = " + stringifyModules(modules) + ";\nvar __kame__ = global.__kame_instances__[" + JSON.stringify(codeSplittingId) + "];\n\nfor (var key in modules) {\n\tif ({}.hasOwnProperty.call(modules, key)) {\n\t\t__kame__.modules[key] = modules[key];\n\t}\n}\n\n__kame__.resolveChunk(" + JSON.stringify(entryId) + ");\n");
}
exports.chunkWrapper = chunkWrapper;
