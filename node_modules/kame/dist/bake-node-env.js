"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var t = __importStar(require("@babel/types"));
var generator_1 = __importDefault(require("@babel/generator"));
var parser = __importStar(require("@babel/parser"));
var traverse_1 = __importDefault(require("@babel/traverse"));
function bakeNodeEnv(code, env) {
    var ast = parser.parse(code, {
        allowImportExportEverywhere: true,
        allowAwaitOutsideFunction: true,
        allowReturnOutsideFunction: true,
        allowSuperOutsideMethod: true,
        allowUndeclaredExports: true,
        sourceType: "unambiguous",
    });
    traverse_1.default(ast, {
        MemberExpression: function (nodePath) {
            var node = nodePath.node;
            if (t.isMemberExpression(node.object) &&
                t.isIdentifier(node.object.object) &&
                node.object.object.name === "process" &&
                t.isIdentifier(node.object.property) &&
                node.object.property.name === "env" &&
                t.isIdentifier(node.property) &&
                node.property.name === "NODE_ENV") {
                nodePath.replaceWith(t.stringLiteral(env));
            }
        },
    });
    return (generator_1.default(ast, {
        // Same effect as default value but silences warning
        compact: code.length > 500 * 1024,
    }).code || code);
}
exports.default = bakeNodeEnv;
