"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var path_1 = __importDefault(require("path"));
var chalk_1 = __importDefault(require("chalk"));
var babel = __importStar(require("@babel/core"));
var commonjs_standalone_1 = require("commonjs-standalone");
function makeRuntime(config) {
    var realRequire = require;
    var delegate = {
        resolve: function (id, fromFilePath) {
            return config.resolver(id, fromFilePath, {});
        },
        read: function (filepath) {
            if (filepath.startsWith("external:")) {
                return "";
            }
            var code = config.loader(filepath);
            if (code.match(/import\s*\(/)) {
                var babelResult = void 0;
                try {
                    babelResult = babel.transformSync(code, {
                        babelrc: false,
                        plugins: ["babel-plugin-dynamic-import-node"],
                        sourceType: "unambiguous",
                        filename: filepath,
                        // Same effect as default value but silences warning
                        compact: code.length > 500 * 1024,
                    });
                    code = (babelResult === null || babelResult === void 0 ? void 0 : babelResult.code) || code;
                }
                catch (err) {
                    console.warn(chalk_1.default.yellow("Warning: Kame runtime failed to convert dynamic imports to requires in the generated code for '" + filepath + "'\n" + err + "."));
                }
            }
            return code;
        },
        run: function (code, moduleEnv, filepath) {
            if (filepath.startsWith("external:")) {
                moduleEnv.exports = moduleEnv.module.exports = realRequire(filepath.replace(/^external:/, ""));
                return;
            }
            var wrapper = config.runtimeEval("(function (exports, require, module, __filename, __dirname) { " +
                code +
                "\n})\n", filepath);
            wrapper(moduleEnv.exports, moduleEnv.require, moduleEnv.module, moduleEnv.__filename, moduleEnv.__dirname);
        },
    };
    var Runtime = /** @class */ (function () {
        function Runtime() {
            this.cache = {};
        }
        Runtime.prototype.load = function (filename) {
            require("regenerator-runtime");
            if (!path_1.default.isAbsolute(filename)) {
                filename = path_1.default.join(process.cwd(), filename);
            }
            return commonjs_standalone_1.Module._load(filename, delegate, this.cache);
        };
        return Runtime;
    }());
    return Runtime;
}
exports.default = makeRuntime;
