"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var chalk_1 = __importDefault(require("chalk"));
var util_1 = __importDefault(require("util"));
var debug_1 = __importDefault(require("debug"));
var debug = debug_1.default("@test-it/default-reporter:index.ts");
var lightRed = "#f14c4c";
var lightGreen = "#23d18b";
var lightYellow = "#f5f543";
function indent(str, amount) {
    var indentAmount = amount * 2; // 2 spaces
    return str
        .split("\n")
        .map(function (line) { return " ".repeat(indentAmount) + line; })
        .join("\n");
}
function printResult(result) {
    if (result.kind === "suite")
        return;
    var message = "";
    if (result.status === "passed") {
        message += chalk_1.default.green("✓ " + result.fullName);
    }
    else if (result.status === "failed") {
        message += chalk_1.default.red("✕ " + result.fullName);
    }
    else {
        message += chalk_1.default.yellow("○ " + result.fullName);
    }
    console.log(message);
}
function formatError(message, stack) {
    var error = message + "\n" + stack;
    if (message.startsWith("SyntaxError") && message.includes("^")) {
        error = message;
    }
    return error
        .split("\n")
        .map(function (line) {
        var output = line;
        // Errors from expect show the matcher hint in gray. Detect that and
        // print those errors nicely.
        if (line.indexOf("Error: \u001b[2m") === 0) {
            output = line.replace(/^Error: /, "") + "\n";
        }
        // Make file locations blue
        output = output.replace(/(at .* \()([^)]+)/g, "$1" + chalk_1.default.blue("$2"));
        return output;
    })
        .join("\n")
        .trim();
}
function summarizeFailingResult(result) {
    console.log(chalk_1.default.hex(lightRed)(chalk_1.default.bold("● " + result.fullName)) + "\n");
    if (result.failedExpectations) {
        result.failedExpectations.forEach(function (failedExpectation) {
            var formattedErrorMessage = formatError(failedExpectation.message, failedExpectation.stack);
            console.log(indent(formattedErrorMessage, 1) + "\n");
        });
    }
}
function specCountSummary(results) {
    var numFailed = results.filter(function (result) { return result.status === "failed"; })
        .length;
    var numSuccess = results.filter(function (result) { return result.status === "passed" && result.kind === "spec"; }).length;
    var numSkipped = results.filter(function (result) { return result.status === "pending"; })
        .length;
    var summaryNotes = [];
    if (numFailed > 0) {
        summaryNotes.push(chalk_1.default.bold(chalk_1.default.hex(lightRed)(numFailed + " failed")));
    }
    if (numSkipped > 0) {
        summaryNotes.push(chalk_1.default.bold(chalk_1.default.hex(lightYellow)(numSkipped + " skipped")));
    }
    if (numSuccess > 0) {
        summaryNotes.push(chalk_1.default.bold(chalk_1.default.hex(lightGreen)(numSuccess + " passed")));
    }
    summaryNotes.push(numFailed + numSkipped + numSuccess + " total");
    return summaryNotes.join(", ");
}
var Reporter = /** @class */ (function () {
    function Reporter() {
        this.results = [];
    }
    Reporter.prototype.jasmineStarted = function (suiteInfo) {
        debug("reporter.jasmineStarted(" + util_1.default.inspect(suiteInfo) + ");");
        this.results = [];
    };
    Reporter.prototype.suiteStarted = function (result) {
        debug("reporter.suiteStarted(" + util_1.default.inspect(result) + ");");
        printResult(__assign(__assign({}, result), { kind: "suite" }));
    };
    Reporter.prototype.specStarted = function (result) {
        debug("reporter.specStarted(" + util_1.default.inspect(result) + ");");
    };
    Reporter.prototype.specDone = function (result) {
        debug("reporter.specDone(" + util_1.default.inspect(result) + ");");
        printResult(__assign(__assign({}, result), { kind: "spec" }));
        this.results.push(__assign(__assign({}, result), { kind: "spec" }));
    };
    Reporter.prototype.suiteDone = function (result) {
        debug("reporter.suiteDone(" + util_1.default.inspect(result) + ");");
        if (result.status === "failed") {
            printResult(__assign(__assign({}, result), { description: "error in describe or before/after callback", kind: "spec" }));
        }
        this.results.push(__assign(__assign({}, result), { kind: "suite" }));
    };
    Reporter.prototype.jasmineDone = function (results) {
        debug("reporter.suiteDone(" + util_1.default.inspect(results) + ");");
        if (this.results.length > 0) {
            process.stdout.write("\n");
        }
        var failing = this.results.filter(function (result) { return result.status === "failed"; });
        failing.forEach(summarizeFailingResult);
        console.log(chalk_1.default.bold(specCountSummary(this.results)));
    };
    return Reporter;
}());
exports.default = Reporter;
