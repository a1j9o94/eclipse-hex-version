"use strict";
var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = __importDefault(require("util"));
var chalk_1 = __importDefault(require("chalk"));
var core_1 = require("@test-it/core");
var config_1 = require("./config");
var debug_1 = __importDefault(require("debug"));
var chokidar_1 = __importDefault(require("chokidar"));
var lodash_debounce_1 = __importDefault(require("lodash.debounce"));
var date_fns_1 = require("date-fns");
var debug = debug_1.default("@test-it/cli:watch.ts");
function clearScreen() {
    process.stdout.write("\u001b[2J\u001b[0;0H"); // Clear screen
    process.stdout.write("\u001b[3J"); // Clear scrollback
}
function watch(cliConfig) {
    return __awaiter(this, void 0, void 0, function () {
        var fileFilter, abortRequested, updateSnapshotsOnNextRun, runTestsPass, currentPass, doRun, debouncedDoRun, watcher, awaitingPattern;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    fileFilter = null;
                    abortRequested = false;
                    updateSnapshotsOnNextRun = false;
                    runTestsPass = function runTestsPass() {
                        return __awaiter(this, void 0, void 0, function () {
                            var config, result, label;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        debug("running test pass");
                                        abortRequested = false;
                                        return [4 /*yield*/, config_1.convertCliConfig(cliConfig)];
                                    case 1:
                                        config = _a.sent();
                                        config.testFiles = config.testFiles.filter(function (filename) {
                                            debug("Comparing " + filename + " against current filter: " + String(fileFilter));
                                            return fileFilter ? fileFilter.test(filename) : true;
                                        });
                                        if (updateSnapshotsOnNextRun) {
                                            config.updateSnapshots = "all";
                                            updateSnapshotsOnNextRun = false;
                                        }
                                        debug("Parsed Config: " + util_1.default.inspect(config));
                                        config.shouldAbort = function () { return abortRequested; };
                                        return [4 /*yield*/, core_1.runTests(config)];
                                    case 2:
                                        result = _a.sent();
                                        debug("Tests result: " + JSON.stringify(result));
                                        label = result;
                                        try {
                                            label = {
                                                failed: chalk_1.default.red.bold,
                                                passed: chalk_1.default.green.bold,
                                                canceled: chalk_1.default.yellow.bold,
                                            }[result](result);
                                        }
                                        catch (err) {
                                            // In case I add more results in the future (people could have mismatching cli/core versions)
                                        }
                                        console.log(chalk_1.default(templateObject_1 || (templateObject_1 = __makeTemplateObject(["{dim Test run ", " at ", ".}"], ["{dim Test run ", " at ", ".}"])), label, date_fns_1.format(new Date(), "hh:mm:ss")));
                                        if (fileFilter) {
                                            console.log(chalk_1.default(templateObject_2 || (templateObject_2 = __makeTemplateObject(["{bgYellow.black Current test file filter: {bold ", "}}. {dim To clear the filter, type }{bold clear} {dim and press enter.}"], ["{bgYellow.black Current test file filter: {bold ", "}}. {dim To clear the filter, type }{bold clear} {dim and press enter.}"])), fileFilter.toString()));
                                        }
                                        console.log(chalk_1.default(templateObject_3 || (templateObject_3 = __makeTemplateObject(["\n{dim To run tests again, press enter. To exit, type }{bold exit} {dim and press enter. For more commands, type }{bold help} {dim and press enter.}"], ["\\n{dim To run tests again, press enter. To exit, type }{bold exit} {dim and press enter. For more commands, type }{bold help} {dim and press enter.}"]))));
                                        process.stdout.write("> ");
                                        return [2 /*return*/];
                                }
                            });
                        });
                    };
                    currentPass = null;
                    doRun = function () {
                        debug("doRun called at " + Date.now());
                        if (currentPass) {
                            debug("run in progress; aborting and pending new run");
                            abortRequested = true;
                            currentPass.then(doRun);
                        }
                        else {
                            clearScreen();
                            currentPass = runTestsPass().then(function () { return (currentPass = null); }, function () { return (currentPass = null); });
                        }
                    };
                    debouncedDoRun = lodash_debounce_1.default(doRun, 100);
                    watcher = chokidar_1.default.watch([
                        ".",
                        "!**/node_modules/**",
                        "!**/.git/**",
                        "!**/*.snap",
                        "!**/*.png",
                    ]);
                    watcher.on("add", function (_path) {
                        debug("watcher: add: " + _path);
                        debouncedDoRun();
                    });
                    watcher.on("change", function (_path) {
                        debug("watcher: change: " + _path);
                        debouncedDoRun();
                    });
                    watcher.on("unlink", function (_path) {
                        debug("watcher: unlink: " + _path);
                        debouncedDoRun();
                    });
                    watcher.on("addDir", function (_path) {
                        debug("watcher: addDir: " + _path);
                        debouncedDoRun();
                    });
                    watcher.on("unlinkDir", function (_path) {
                        debug("watcher: unlinkDir: " + _path);
                        debouncedDoRun();
                    });
                    watcher.on("error", function (error) {
                        debug("watcher: error: " + util_1.default.inspect(error));
                    });
                    awaitingPattern = false;
                    return [4 /*yield*/, new Promise(function (resolve) {
                            process.stdin.on("data", function (data) {
                                var stringData = data.toString("utf-8").replace(/\r/g, "");
                                if (awaitingPattern) {
                                    awaitingPattern = false;
                                    var trimmed = stringData.trim();
                                    if (trimmed.length === 0) {
                                        fileFilter = null;
                                    }
                                    else {
                                        fileFilter = new RegExp(trimmed);
                                    }
                                    debouncedDoRun();
                                }
                                else {
                                    switch (stringData) {
                                        case "q\n":
                                        case "quit\n":
                                        case "exit\n": {
                                            resolve();
                                            break;
                                        }
                                        case "run\n":
                                        case "\n": {
                                            debouncedDoRun();
                                            break;
                                        }
                                        case "p\n":
                                        case "pattern\n":
                                        case "filter\n": {
                                            if (currentPass) {
                                                abortRequested = true;
                                                console.log("Canceling run...");
                                                currentPass.then(function () {
                                                    awaitingPattern = true;
                                                    process.stdout.write("\nPlease enter a test filter: ");
                                                });
                                            }
                                            else {
                                                awaitingPattern = true;
                                                process.stdout.write("Please enter a test filter: ");
                                            }
                                            break;
                                        }
                                        case "x\n":
                                        case "stop\n": {
                                            if (currentPass) {
                                                abortRequested = true;
                                                console.log("Canceling run...");
                                            }
                                            else {
                                                process.stdout.write("> ");
                                            }
                                            break;
                                        }
                                        case "a\n":
                                        case "all\n":
                                        case "clear\n": {
                                            fileFilter = null;
                                            debouncedDoRun();
                                            break;
                                        }
                                        case "u\n":
                                        case "update\n": {
                                            var doIt = function () {
                                                updateSnapshotsOnNextRun = true;
                                                debouncedDoRun();
                                            };
                                            if (currentPass) {
                                                abortRequested = true;
                                                console.log("Canceling run...");
                                                currentPass.then(doIt);
                                            }
                                            else {
                                                doIt();
                                            }
                                            break;
                                        }
                                        case "help\n": {
                                            console.log("List of commands:\n");
                                            console.log(chalk_1.default(templateObject_4 || (templateObject_4 = __makeTemplateObject(["{bold run}: Run the tests. {dim Shortcut: press enter with no command}"], ["{bold run}: Run the tests. {dim Shortcut: press enter with no command}"]))));
                                            console.log(chalk_1.default(templateObject_5 || (templateObject_5 = __makeTemplateObject(["{bold quit}, {bold exit}: Exit watch mode. {dim Shortcut: {bold q}}"], ["{bold quit}, {bold exit}: Exit watch mode. {dim Shortcut: {bold q}}"]))));
                                            console.log(chalk_1.default(templateObject_6 || (templateObject_6 = __makeTemplateObject(["{bold pattern}, {bold filter}: Filter which test files to run, by name. {dim Shortcut: {bold p}}"], ["{bold pattern}, {bold filter}: Filter which test files to run, by name. {dim Shortcut: {bold p}}"]))));
                                            console.log(chalk_1.default(templateObject_7 || (templateObject_7 = __makeTemplateObject(["{bold all}, {bold clear}: Clear the test file filter and run all tests. {dim Shortcut: {bold a}}"], ["{bold all}, {bold clear}: Clear the test file filter and run all tests. {dim Shortcut: {bold a}}"]))));
                                            console.log(chalk_1.default(templateObject_8 || (templateObject_8 = __makeTemplateObject(["{bold stop}: Stop the current test run. {dim Shortcut: {bold x}}"], ["{bold stop}: Stop the current test run. {dim Shortcut: {bold x}}"]))));
                                            console.log(chalk_1.default(templateObject_9 || (templateObject_9 = __makeTemplateObject(["{bold update}: Run the tests and update all snapshots. {dim Shortcut: {bold u}}"], ["{bold update}: Run the tests and update all snapshots. {dim Shortcut: {bold u}}"]))));
                                            process.stdout.write("\n\n> ");
                                            break;
                                        }
                                        default: {
                                            console.log(chalk_1.default(templateObject_10 || (templateObject_10 = __makeTemplateObject(["{red Unrecognized command:} {bold ", "}. For help, type {bold help} and press enter."], ["{red Unrecognized command:} {bold ", "}. For help, type {bold help} and press enter."])), stringData.trim()));
                                            process.stdout.write("> ");
                                        }
                                    }
                                }
                            });
                            process.on("SIGINT", resolve);
                            process.on("SIGTERM", resolve);
                        })];
                case 1:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    });
}
exports.default = watch;
var templateObject_1, templateObject_2, templateObject_3, templateObject_4, templateObject_5, templateObject_6, templateObject_7, templateObject_8, templateObject_9, templateObject_10;
