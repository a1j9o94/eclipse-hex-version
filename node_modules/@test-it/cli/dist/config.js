"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = __importDefault(require("util"));
var path_1 = __importDefault(require("path"));
var globby_1 = __importDefault(require("globby"));
var yargs_parser_1 = __importDefault(require("yargs-parser"));
var make_module_env_1 = __importDefault(require("make-module-env"));
var debug_1 = __importDefault(require("debug"));
var debug = debug_1.default("@test-it/cli:config.ts");
exports.usage = [
    "Usage: test-it [options] [testFileGlobs...]",
    "Examples:",
    "  test-it",
    "  test-it --help",
    "  test-it './tests/**/*.js'",
    "  test-it --seed 1234",
    "  test-it --seed 1234 './tests/**/*.js'",
    "  test-it './tests/**/*.js' '!**/*.snapshot.js'",
    "",
    "Options:",
    "  --watch: Watch files and re-run tests on change.",
    "",
    "    Runs the tests repeatedly in an interactive watch mode.",
    "",
    "    Example: test-it --watch",
    "",
    "  --test-setup-files: A comma-separated list of files to run before each test file.",
    "",
    "    A comma-separated list of paths to modules that run some code to",
    "    configure or set up the testing environment.",
    "",
    "    Example: test-it --test-setup-files ./test-setup.js",
    "    Example: test-it --test-setup-files ./test-setup.js,./other-test-setup.js",
    "",
    "  --reporters: Specify which test reporter module(s) to use.",
    "",
    "    Example: test-it --reporter some-reporter-from-npm",
    "    Example: test-it --reporter ./my-reporter.js",
    "    Example: test-it --reporter ./my-reporter.js,another-reporter",
    "",
    "    Reporters define what to print during (and after) a test run.",
    "    When you run Test-It, and it prints a list of what failed, what",
    "    succeeded, what's pending, etc... that's being printed by your",
    "    reporter.",
    "",
    "    A test reporter module should export either a Jasmine reporter",
    "    class, or an instance of a Jasmine reporter class.",
    "",
    "    If you don't specify any reporter(s), a default built-in",
    "    reporter will be used.",
    "",
    "  --loader: Specify which loader module to use.",
    "",
    "    Loader modules tell Test-It how to load and compile your test files.",
    "",
    "    The default loader module supports ES2020, React, TypeScript, and Flow.",
    "",
    "    A loader module should export a function that receives a",
    "    string (the file to load), and returns a string (the code to",
    "     execute in the browser). Loader modules must be synchronous,",
    "     because they're called when 'require' is called.",
    "",
    "    Example: test-it --loader some-loader-from-npm",
    "    Example: test-it --loader ./my-loader.js",
    "",
    "  --resolver: Specify which resolver module to use.",
    "",
    "    Resolver modules tell Test-It how to translate the string in",
    "    a require or import into the absolute path of a file on disk.",
    "",
    "    The default resolver uses node's node_module lookup algorithm,",
    "    and allows you to omit the file extension for the following filetypes:",
    "    '.js', '.json', '.mjs', '.jsx', '.ts', and '.tsx'.",
    "",
    "    A resolver module should be defined according to the",
    "    eslint-plugin-import resolver spec v2 as defined at the",
    "    following url:",
    "",
    "    https://github.com/benmosher/eslint-plugin-import/blob/b916ed2b574a107e62f819663b8c300f82d82d8d/resolvers/README.md",
    "",
    "    Example: test-it --resolver some-resolver-from-npm",
    "    Example: test-it --resolver ./my-resolver.js",
    "",
    "  --update-snapshots, -u: Update test snapshots.",
    "",
    "    This option force-updates any test snapshots created with",
    "    'expect(...).toMatchSnapshot()'.",
    "",
    "    Example: test-it --update-snapshots",
    "    Example: test-it -u",
    "",
    "  --seed: Specify a seed for Test-It's random test ordering.",
    "",
    "    Test-It runs tests in a random order by default, to help you",
    "    avoid situations where code from one test is leaking into",
    "    another.",
    "",
    "    However, if you need the order that your tests run in to be",
    "    deterministic, you can specify a seed value, and the tests",
    "    will run in the same order each time.",
    "",
    "    Example: test-it --seed 1234",
    "    Example: test-it --seed 7",
    "",
    "  --help: Show this usage text.",
    "",
    "    Example: test-it --help",
    "",
    "  --version: Show the versions of @test-it/cli and @test-it/core.",
    "",
    "    Example: test-it --version",
].join("\n");
function parseArgvIntoCliConfig(argv) {
    debug("Parsing argv with yargs: " + util_1.default.inspect(argv));
    var opts = yargs_parser_1.default(argv, {
        string: ["loader", "resolver", "testSetupFiles"],
        array: ["reporters"],
        number: ["seed"],
        boolean: [
            "halp",
            "varsion",
            "updateSnapshots",
            "updateSnapshot",
            "u",
            "watch",
        ],
    });
    debug("Yargs result: " + util_1.default.inspect(opts));
    return {
        testFiles: opts._ && opts._.length > 0
            ? opts._
            : ["**/?(*.)+(spec|test).[jt]s?(x)", "!**/node_modules/**"],
        reporters: (Array.isArray(opts.reporters)
            ? opts.reporters
            : [opts.reporters]).filter(Boolean),
        loader: opts.loader,
        seed: opts.seed,
        help: opts.halp,
        version: opts.varsion,
        resolver: opts.resolver,
        testSetupFiles: opts.testSetupFiles
            ? opts.testSetupFiles
                .split(",")
                .map(function (filepath) {
                return filepath.startsWith(".")
                    ? path_1.default.resolve(process.cwd(), filepath)
                    : filepath;
            })
            : undefined,
        updateSnapshots: Boolean(opts.updateSnapshots || opts.u || opts.updateSnapshot),
        watch: opts.watch,
    };
}
exports.parseArgvIntoCliConfig = parseArgvIntoCliConfig;
function convertCliConfig(cliConfig) {
    return __awaiter(this, void 0, void 0, function () {
        var env, testFiles, outputConfig;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    env = make_module_env_1.default(path_1.default.join(process.cwd(), "test-it-context.js"));
                    debug("Expanding globs: " + util_1.default.inspect(cliConfig.testFiles));
                    return [4 /*yield*/, globby_1.default(cliConfig.testFiles)];
                case 1:
                    testFiles = _a.sent();
                    outputConfig = {
                        testFiles: testFiles,
                        updateSnapshots: cliConfig.updateSnapshots
                            ? "all"
                            : process.env.CI === "true"
                                ? "none"
                                : "new",
                    };
                    if (cliConfig.reporters) {
                        outputConfig.reporters = cliConfig.reporters.map(function (reporterString) {
                            var result = env.require(reporterString);
                            if (result.__esModule && result.default)
                                result = result.default;
                            if (typeof result === "function") {
                                return new result();
                            }
                            else {
                                return result;
                            }
                        });
                    }
                    if (cliConfig.loader) {
                        outputConfig.loader = cliConfig.loader;
                    }
                    if (cliConfig.resolver) {
                        outputConfig.resolver = cliConfig.resolver;
                    }
                    if (cliConfig.seed != null) {
                        outputConfig.seed = cliConfig.seed;
                    }
                    outputConfig.testSetupFiles = cliConfig.testSetupFiles;
                    return [2 /*return*/, outputConfig];
            }
        });
    });
}
exports.convertCliConfig = convertCliConfig;
