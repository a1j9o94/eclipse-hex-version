#!/usr/bin/env node
"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var fs_1 = __importDefault(require("fs"));
var path_1 = __importDefault(require("path"));
var chalk_1 = __importDefault(require("chalk"));
var child_process_1 = __importDefault(require("child_process"));
var debug_1 = __importDefault(require("debug"));
var debug = debug_1.default("@test-it/cli:cli.ts");
var nodeNwPkgPath = require.resolve("node-nw/package.json");
var nodeNwDirectoryPath = path_1.default.dirname(nodeNwPkgPath);
var nodeNwPkg = JSON.parse(fs_1.default.readFileSync(nodeNwPkgPath, "utf-8"));
var nodeNwBin;
if (typeof nodeNwPkg.bin === "string") {
    nodeNwBin = path_1.default.join(nodeNwDirectoryPath, nodeNwPkg.bin);
}
else {
    nodeNwBin = path_1.default.join(nodeNwDirectoryPath, nodeNwPkg.bin["node-nw"]);
}
debug("Using node-nw bin at '" + nodeNwBin + "'");
var mappedArgs = process.argv
    .slice(2)
    // Hack: node-nw swallows the `--help` arg, so we need to change it to something else.
    .map(function (arg) { return (arg === "--help" ? "--halp" : arg); })
    // Hack: node-nw swallows the `--version` arg, so we need to change it to something else.
    .map(function (arg) { return (arg === "--version" ? "--varsion" : arg); });
var child = child_process_1.default.spawn("node", __spread([
    nodeNwBin,
    path_1.default.join(__dirname, "index.js")
], mappedArgs, (mappedArgs.some(function (arg) { return arg.match(/--high-dpi-support/); })
    ? []
    : ["--high-dpi-support=1"]), (mappedArgs.some(function (arg) { return arg.match(/--force-device-scale-factor/); })
    ? []
    : ["--force-device-scale-factor=1"])), {
    cwd: process.cwd(),
    env: __assign(__assign({}, process.env), { 
        // TODO: node-nw isn't forwarding color detection properly
        FORCE_COLOR: "3" }),
});
child.stdout.pipe(process.stdout);
child.stderr.pipe(process.stderr);
process.stdin.pipe(child.stdin);
child.on("error", function (err) {
    debug("Child process errored: " + (err.stack || err));
    console.error(chalk_1.default.red(err.stack || err));
    process.exitCode = 2;
});
child.on("exit", function (code, signal) {
    debug("Child process exited; code: " + code + ", signal: " + signal);
    process.exit(code || 0);
});
process.on("SIGINT", function () {
    child.kill("SIGINT");
});
process.on("SIGTERM", function () {
    child.kill("SIGTERM");
});
