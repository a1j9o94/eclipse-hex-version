"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var path_1 = __importDefault(require("path"));
var util_1 = __importDefault(require("util"));
var bluebird_1 = __importDefault(require("bluebird"));
var jasmine_mini_1 = __importDefault(require("@suchipi/jasmine-mini"));
var jest_snapshot_1 = require("jest-snapshot");
var config_1 = require("./config");
var debug_1 = __importDefault(require("debug"));
var regenerator_runtime_1 = __importDefault(require("regenerator-runtime"));
var kame_1 = require("kame");
var make_expect_1 = __importDefault(require("./make-expect"));
var debug = debug_1.default("@test-it/core:index.ts");
function openWindow(url, options) {
    return new Promise(function (resolve) {
        return nw.Window.open(url, options, resolve);
    });
}
var REAL_JASMINE_DONE = Symbol("REAL_JASMINE_DONE");
function runTests(inputConfig) {
    return __awaiter(this, void 0, void 0, function () {
        var config, hasReportedStart, lastRunDetails, results, overallStatus;
        var _this = this;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    config = config_1.normalizeConfig(inputConfig);
                    debug("NormalizedConfig: " + util_1.default.inspect(config));
                    hasReportedStart = false;
                    lastRunDetails = null;
                    config.reporters.forEach(function (reporter) {
                        var realJasmineStarted = reporter.jasmineStarted || (function () { });
                        reporter.jasmineStarted = function () {
                            var args = [];
                            for (var _i = 0; _i < arguments.length; _i++) {
                                args[_i] = arguments[_i];
                            }
                            if (!hasReportedStart) {
                                realJasmineStarted.call.apply(realJasmineStarted, __spread([reporter], args));
                                hasReportedStart = true;
                            }
                        };
                        reporter[REAL_JASMINE_DONE] = reporter.jasmineDone;
                        reporter.jasmineDone = function (runDetails) {
                            lastRunDetails = runDetails;
                        };
                    });
                    return [4 /*yield*/, bluebird_1.default.map(config.testFiles, function (filename) { return __awaiter(_this, void 0, void 0, function () {
                            var relativeFilename, j, testWindow, win, originalConsole, testInterface, snapshotState, expect, sleep, makeDebug, kame, runtime, results;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        if (config.shouldAbort())
                                            return [2 /*return*/, { overallStatus: "canceled" }];
                                        if (!path_1.default.isAbsolute(filename)) {
                                            filename = path_1.default.join(process.cwd(), filename);
                                        }
                                        relativeFilename = path_1.default.relative(process.cwd(), filename);
                                        debug("Opening window for '" + filename + "'");
                                        j = new jasmine_mini_1.default();
                                        j.configureDefaultReporter({
                                            print: function () { },
                                        });
                                        if (config.seed != null) {
                                            j.seed(config.seed);
                                        }
                                        config.reporters.forEach(function (reporter) { return j.addReporter(reporter); });
                                        return [4 /*yield*/, openWindow("about:blank", { show: false })];
                                    case 1:
                                        testWindow = _a.sent();
                                        win = testWindow.window;
                                        win.nw = nw;
                                        win.global = win;
                                        win.process = process;
                                        win.regeneratorRuntime = regenerator_runtime_1.default;
                                        win.Buffer = Buffer;
                                        originalConsole = win.console;
                                        win.console = __assign(__assign({}, originalConsole), { assert: function (condition) {
                                                var args = [];
                                                for (var _i = 1; _i < arguments.length; _i++) {
                                                    args[_i - 1] = arguments[_i];
                                                }
                                                console.assert.apply(console, __spread([condition,
                                                    "console.assert (" + relativeFilename + "):"], args));
                                                originalConsole.assert.apply(originalConsole, __spread([condition], args));
                                            }, dir: function (object) {
                                                console.log("console.dir (" + relativeFilename + "):\n" + util_1.default.inspect(object));
                                                originalConsole.dir(object);
                                            }, error: function () {
                                                var args = [];
                                                for (var _i = 0; _i < arguments.length; _i++) {
                                                    args[_i] = arguments[_i];
                                                }
                                                console.error.apply(console, __spread(["console.error (" + relativeFilename + "):"], args));
                                                originalConsole.error.apply(originalConsole, __spread(args));
                                            }, info: function () {
                                                var args = [];
                                                for (var _i = 0; _i < arguments.length; _i++) {
                                                    args[_i] = arguments[_i];
                                                }
                                                console.info.apply(console, __spread(["console.info (" + relativeFilename + "):"], args));
                                                originalConsole.info.apply(originalConsole, __spread(args));
                                            }, log: function () {
                                                var args = [];
                                                for (var _i = 0; _i < arguments.length; _i++) {
                                                    args[_i] = arguments[_i];
                                                }
                                                console.log.apply(console, __spread(["console.log (" + relativeFilename + "):"], args));
                                                originalConsole.log.apply(originalConsole, __spread(args));
                                            }, warn: function () {
                                                var args = [];
                                                for (var _i = 0; _i < arguments.length; _i++) {
                                                    args[_i] = arguments[_i];
                                                }
                                                console.warn.apply(console, __spread(["console.warn (" + relativeFilename + "):"], args));
                                                originalConsole.warn.apply(originalConsole, __spread(args));
                                            }, time: function (label) {
                                                console.time("console.time (" + relativeFilename + "): " + label);
                                                originalConsole.time(label);
                                            }, timeEnd: function (label) {
                                                console.timeEnd("console.timeEnd (" + relativeFilename + "): " + label);
                                                originalConsole.timeEnd(label);
                                            } });
                                        win.TestIt = {
                                            captureScreenshot: function (options) {
                                                if (options === void 0) { options = { fullsize: true }; }
                                                return __awaiter(this, void 0, void 0, function () {
                                                    var captureScreenshot, base64;
                                                    return __generator(this, function (_a) {
                                                        switch (_a.label) {
                                                            case 0:
                                                                captureScreenshot = util_1.default.promisify(
                                                                // @ts-ignore
                                                                testWindow.captureScreenshot.bind(testWindow));
                                                                // Seems to be a bug in NW.js here; captureScreenshot
                                                                // never resolves unless the page is visible.
                                                                testWindow.show(true);
                                                                return [4 /*yield*/, captureScreenshot(options)];
                                                            case 1:
                                                                base64 = _a.sent();
                                                                testWindow.show(false);
                                                                return [2 /*return*/, Buffer.from(base64, "base64")];
                                                        }
                                                    });
                                                });
                                            },
                                            resizeWindow: function (width, height) {
                                                testWindow.resizeTo(width, height);
                                            },
                                        };
                                        testInterface = j.getInterface();
                                        Object.assign(win, testInterface);
                                        snapshotState = new jest_snapshot_1.SnapshotState(filename + ".snap", {
                                            updateSnapshot: config.updateSnapshots,
                                            // These are just stubs, but we'll need to make them real
                                            // if we ever add support for inline snapshots.
                                            getPrettier: function () { return null; },
                                            getBabelTraverse: function () { return function () { }; },
                                        });
                                        expect = make_expect_1.default(filename, j, snapshotState, config);
                                        win.expect = expect;
                                        // jest compat
                                        win.test = win.it;
                                        win.it.only = win.fit;
                                        win.test.only = win.fit;
                                        win.describe.only = win.fdescribe;
                                        win.it.skip = win.xit;
                                        win.test.skip = win.xit;
                                        win.describe.skip = win.xdescribe;
                                        // mocha compat
                                        win.before = win.beforeAll;
                                        win.after = win.afterAll;
                                        sleep = function (ms) {
                                            return new Promise(function (resolve) { return setTimeout(resolve, ms); });
                                        };
                                        makeDebug = function (itFunc) {
                                            return function debug(name, cb) {
                                                var _this = this;
                                                if (cb.length === 1) {
                                                    itFunc(name, function (done) { return __awaiter(_this, void 0, void 0, function () {
                                                        var _this = this;
                                                        return __generator(this, function (_a) {
                                                            testWindow.show(true);
                                                            testWindow.showDevTools(undefined, function () { return __awaiter(_this, void 0, void 0, function () {
                                                                return __generator(this, function (_a) {
                                                                    switch (_a.label) {
                                                                        case 0: 
                                                                        // Racing the amount of time it takes devtools to connect...
                                                                        return [4 /*yield*/, sleep(1500)];
                                                                        case 1:
                                                                            // Racing the amount of time it takes devtools to connect...
                                                                            _a.sent();
                                                                            win.eval([
                                                                                "(function debug(testCode /* " + name + " */, done) {",
                                                                                "  // Your test code hasn't run yet. ",
                                                                                "  // To run it, either:",
                                                                                "  //",
                                                                                "  // - Press the blue 'Resume script execution' button in the right pane,",
                                                                                "  // OR",
                                                                                "  // - Press the gray 'Step into next function call' button twice.",
                                                                                "  //",
                                                                                "  // When you're done debugging, close the browser window to resume your tests.",
                                                                                "  debugger;",
                                                                                "  testCode(done);",
                                                                                "})",
                                                                            ].join("\n"))(cb, function () {
                                                                                // `done` is a no-op when debugging. Close the browser window to end the test.
                                                                            });
                                                                            testWindow.on("close", function () { return done(); });
                                                                            return [2 /*return*/];
                                                                    }
                                                                });
                                                            }); });
                                                            return [2 /*return*/];
                                                        });
                                                    }); }, 
                                                    // Set the jasmine async timeout for this test to a really big number.
                                                    2147483647 // If we pass a larger number, it gets coerced to 1
                                                    );
                                                }
                                                else {
                                                    itFunc(name, function () { return __awaiter(_this, void 0, void 0, function () {
                                                        var result;
                                                        return __generator(this, function (_a) {
                                                            switch (_a.label) {
                                                                case 0:
                                                                    testWindow.show(true);
                                                                    return [4 /*yield*/, new Promise(function (resolve) {
                                                                            testWindow.showDevTools(undefined, resolve);
                                                                        })];
                                                                case 1:
                                                                    _a.sent();
                                                                    // Racing the amount of time it takes devtools to connect...
                                                                    return [4 /*yield*/, sleep(1500)];
                                                                case 2:
                                                                    // Racing the amount of time it takes devtools to connect...
                                                                    _a.sent();
                                                                    result = win.eval([
                                                                        "(function debug(testCode /* " + name + " */) {",
                                                                        "  // Your test code hasn't run yet. ",
                                                                        "  // To run it, either:",
                                                                        "  //",
                                                                        "  // - Press the blue 'Resume script execution' button in the right pane,",
                                                                        "  // OR",
                                                                        "  // - Press the gray 'Step into next function call' button twice.",
                                                                        "  //",
                                                                        "  // When you're done debugging, close the browser window to resume your tests.",
                                                                        "  debugger;",
                                                                        "  testCode();",
                                                                        "})",
                                                                    ].join("\n"))(cb);
                                                                    return [4 /*yield*/, result];
                                                                case 3:
                                                                    _a.sent();
                                                                    return [4 /*yield*/, new Promise(function (resolve) {
                                                                            testWindow.on("close", resolve);
                                                                        })];
                                                                case 4:
                                                                    _a.sent();
                                                                    return [2 /*return*/];
                                                            }
                                                        });
                                                    }); }, 
                                                    // Set the jasmine async timeout for this test to a really big number.
                                                    2147483647 // If we pass a larger number, it gets coerced to 1
                                                    );
                                                }
                                            };
                                        };
                                        win.debug = makeDebug(win.it);
                                        win.debug.skip = makeDebug(win.xit);
                                        win.debug.only = makeDebug(win.fit);
                                        kame = kame_1.configure({
                                            loader: config.loader,
                                            resolver: config.resolver,
                                            runtimeEval: function (code, filepath) {
                                                return win.eval(code + ("\n//# sourceURL=" + filepath + "\n"));
                                            },
                                        });
                                        runtime = new kame.Runtime();
                                        testInterface.describe(relativeFilename, function () {
                                            debug("Running test setup files: " + util_1.default.inspect(config.testSetupFiles));
                                            config.testSetupFiles.forEach(function (testSetupFile) {
                                                runtime.load(testSetupFile);
                                            });
                                            debug("Running test code: '" + filename + "'");
                                            runtime.load(filename);
                                        });
                                        return [4 /*yield*/, new Promise(function (resolve) {
                                                j.onComplete(resolve);
                                                j.execute();
                                            })];
                                    case 2:
                                        results = _a.sent();
                                        testWindow.close(true);
                                        return [2 /*return*/, results];
                                }
                            });
                        }); }, {
                            // TODO: the snapshots mess up when we run tests concurrently.
                            concurrency: 1,
                        })];
                case 1:
                    results = _a.sent();
                    config.reporters.forEach(function (reporter) {
                        if (reporter[REAL_JASMINE_DONE]) {
                            reporter[REAL_JASMINE_DONE](lastRunDetails);
                        }
                    });
                    debug("Run completed");
                    overallStatus = results.some(function (result) { return result.overallStatus === "failed"; })
                        ? "failed"
                        : results.some(function (result) { return result.overallStatus === "canceled"; })
                            ? "canceled"
                            : "passed";
                    return [2 /*return*/, overallStatus];
            }
        });
    });
}
exports.runTests = runTests;
