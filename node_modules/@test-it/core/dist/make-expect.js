"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var fs_1 = __importDefault(require("fs"));
var path_1 = __importDefault(require("path"));
var util_1 = __importDefault(require("util"));
var mkdirp_1 = __importDefault(require("mkdirp"));
var chalk_1 = __importDefault(require("chalk"));
var is_buffer_1 = __importDefault(require("is-buffer"));
var jest_diff_1 = require("jest-diff");
var pixelmatch_1 = __importDefault(require("pixelmatch"));
var pngjs_1 = require("pngjs");
var test_name_reporter_1 = __importDefault(require("./test-name-reporter"));
var makeExpect = function (filename, j, snapshotState, config) {
    var testNameReporter = new test_name_reporter_1.default();
    j.addReporter(testNameReporter);
    delete require.cache[require.resolve("expect")];
    var expect = require("expect");
    var matchers = {
        toMatchSnapshot: function (received) {
            var testName = testNameReporter.getCurrentTestName();
            var result = snapshotState.match({
                testName: testName,
                isInline: false,
                received: received,
                error: new Error(),
            });
            var actual = result.actual || "";
            var expected = result.expected || "";
            snapshotState.save();
            if (result.pass) {
                return {
                    message: function () { return ""; },
                    pass: true,
                };
            }
            else if (result.expected === undefined) {
                throw new Error("Tried to write to a new snapshot in CI: '" + filename + "' '" + result.key + "'. Did you forget to commit your snapshots?");
            }
            else {
                var summary_1 = jest_diff_1.diffLinesUnified(expected.split("\n"), actual.split("\n"), {
                    aAnnotation: "Snapshot",
                    bAnnotation: "Received",
                });
                return {
                    message: function () {
                        return chalk_1.default.bold.red("Expected value to match snapshot: '" + result.key + "'") +
                            "\n\n" +
                            summary_1;
                    },
                    pass: false,
                };
            }
        },
        toMatchInlineSnapshot: function () {
            throw new Error("Sorry, inline snapshots are not yet supported. Use `toMatchSnapshot` instead.");
        },
        toMatchImageSnapshot: function (received, options) {
            var _a;
            if (!is_buffer_1.default(received)) {
                throw new Error("toMatchImageSnapshot must be used with a buffer of png data, but instead, it was used with: " + util_1.default.inspect(received));
            }
            var testName = testNameReporter.getCurrentTestName();
            var testFileSnapshotFolder = path_1.default.join(path_1.default.dirname(filename), "image-snapshots", path_1.default.basename(filename, path_1.default.extname(filename)));
            var snapshotExpectedFile = path_1.default.join(testFileSnapshotFolder, testName + ".png");
            var snapshotActualFile = path_1.default.join(testFileSnapshotFolder, testName + ".actual.png");
            var snapshotDiffFile = path_1.default.join(testFileSnapshotFolder, testName + ".diff.png");
            mkdirp_1.default.sync(testFileSnapshotFolder);
            if (fs_1.default.existsSync(snapshotActualFile)) {
                fs_1.default.unlinkSync(snapshotActualFile);
            }
            if (fs_1.default.existsSync(snapshotDiffFile)) {
                fs_1.default.unlinkSync(snapshotDiffFile);
            }
            if (config.updateSnapshots === "none") {
                throw new Error("Tried to write to a new image snapshot in CI: '" + snapshotExpectedFile + "'. Did you forget to commit your snapshots?");
            }
            else if (config.updateSnapshots === "all") {
                fs_1.default.writeFileSync(snapshotExpectedFile, received);
                return {
                    message: function () { return ""; },
                    pass: true,
                };
            }
            else if (config.updateSnapshots === "new") {
                if (fs_1.default.existsSync(snapshotExpectedFile)) {
                    var actual = received;
                    var expected = fs_1.default.readFileSync(snapshotExpectedFile);
                    var actualPng = pngjs_1.PNG.sync.read(actual);
                    var expectedPng = pngjs_1.PNG.sync.read(expected);
                    var width = expectedPng.width, height = expectedPng.height;
                    var diff = new pngjs_1.PNG({ width: width, height: height });
                    var matchError_1;
                    var numChangedPixels = 0;
                    try {
                        if (actualPng.width !== expectedPng.width ||
                            actualPng.height !== expectedPng.height) {
                            throw new Error("The provided image has different dimensions from the snapshot.\nSnapshot dimensions: " + expectedPng.width + "x" + expectedPng.height + "\nActual dimensions: " + actualPng.width + "x" + actualPng.height);
                        }
                        numChangedPixels = pixelmatch_1.default(expectedPng.data, actualPng.data, diff.data, width, height, options);
                    }
                    catch (err) {
                        matchError_1 = err;
                    }
                    var maxDifferentPixels = (_a = options === null || options === void 0 ? void 0 : options.maxDifferentPixels) !== null && _a !== void 0 ? _a : 0;
                    if (matchError_1 || numChangedPixels > maxDifferentPixels) {
                        fs_1.default.writeFileSync(snapshotActualFile, pngjs_1.PNG.sync.write(actualPng));
                        if (!matchError_1) {
                            fs_1.default.writeFileSync(snapshotDiffFile, pngjs_1.PNG.sync.write(diff));
                        }
                        return {
                            message: function () {
                                return "Expected image to match snapshot, but it did not: '" + path_1.default.relative(process.cwd(), snapshotExpectedFile) + "'. " + (matchError_1
                                    ? matchError_1.toString()
                                    : "Check the diff at '" + path_1.default.relative(process.cwd(), snapshotDiffFile) + "'");
                            },
                            pass: false,
                        };
                    }
                }
                else {
                    fs_1.default.writeFileSync(snapshotExpectedFile, received);
                }
            }
            return {
                message: function () { return ""; },
                pass: true,
            };
        },
    };
    expect.extend(matchers);
    return expect;
};
exports.default = makeExpect;
