"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.requireMain = requireMain;
exports.Module = void 0;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// From the node `path` module
function dirname(path) {
  if (path.length === 0) return ".";
  var code = path.charCodeAt(0);
  var hasRoot = code === 47
  /*/*/
  ;
  var end = -1;
  var matchedSlash = true;

  for (var i = path.length - 1; i >= 1; --i) {
    code = path.charCodeAt(i);

    if (code === 47
    /*/*/
    ) {
        if (!matchedSlash) {
          end = i;
          break;
        }
      } else {
      // We saw the first non-path separator
      matchedSlash = false;
    }
  }

  if (end === -1) return hasRoot ? "/" : ".";
  if (hasRoot && end === 1) return "//";
  return path.slice(0, end);
}

class Module {
  constructor(id, delegate, cache) {
    _defineProperty(this, "exports", {});

    this.id = id;
    this._delegate = delegate;
    this._cache = cache;
  }

  static _load(filepath, delegate, cache) {
    const module = new Module(filepath, delegate, cache);
    cache[filepath] = module;

    try {
      const code = delegate.read(filepath);
      delegate.run(code, module.env(), filepath);
      return module.exports;
    } catch (err) {
      delete cache[filepath];
      throw err;
    }
  }

  require(unresolvedPath) {
    const resolvedPath = this._delegate.resolve(unresolvedPath, this.id);

    if (this._cache[resolvedPath]) {
      return this._cache[resolvedPath].exports;
    }

    return Module._load(resolvedPath, this._delegate, this._cache);
  }

  _makeRequireFunction() {
    const require = this.require.bind(this);

    require.resolve = unresolvedPath => {
      return this._delegate.resolve(unresolvedPath, this.id);
    };

    require.cache = this._cache; // $FlowFixMe

    return require;
  }

  env() {
    return {
      module: this,
      exports: this.exports,
      require: this._makeRequireFunction(),
      __filename: this.id,
      __dirname: dirname(this.id)
    };
  }

}

exports.Module = Module;

function requireMain(filepath, delegate) {
  Module._load(filepath, delegate, {});
}